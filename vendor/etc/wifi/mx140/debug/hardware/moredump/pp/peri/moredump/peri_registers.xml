<?xml version="1.0" encoding="utf-8"?>

<!--
(c) SCSC 2015-2016 autogenerated by moredump.py as part of 'drun prep'.
  Changes made to this file may cause incorrect behaviour and will be lost if it is regenerated.

  XML file defining registers for peri subsystem moredump
  Chip hash: 854f


-->

<subsystem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.samsung.com ../Registers.xsd"
  name="peri">
  <block name="cs_apbap" comment="CoreSight-400 AHB-AP DAP access port registers.">
    <register addr="d1000000" rw_flags="RW" width="4" name="CS_APBAP_CSW" comment="Control and status word for DAP accesses."/>
    <register addr="d1000004" rw_flags="RW" width="4" name="CS_APBAP_TAR" comment="Address of the current transfer. Bottom 2 bits are ignored."/>
    <register addr="d100000c" rw_flags="RW" width="4" name="CS_APBAP_DRW" comment="Write mode: Data value to write for the current transfer. Read mode: Data value read from the current transfer."/>
    <register addr="d1000010" rw_flags="RW" width="4" name="CS_APBAP_BD[0]" comment="BD0-BD3 provide a mechanism for directly mapping through DAP accesses to AHB transfers without having to rewrite the Transfer Address Register (TAR) within a four-location boundary. BD0 reads/writes from TA. BD1 reads/writes from TA+4."/>
    <register addr="d1000014" rw_flags="RW" width="4" name="CS_APBAP_BD[1]" comment="BD0-BD3 provide a mechanism for directly mapping through DAP accesses to AHB transfers without having to rewrite the Transfer Address Register (TAR) within a four-location boundary. BD0 reads/writes from TA. BD1 reads/writes from TA+4."/>
    <register addr="d1000018" rw_flags="RW" width="4" name="CS_APBAP_BD[2]" comment="BD0-BD3 provide a mechanism for directly mapping through DAP accesses to AHB transfers without having to rewrite the Transfer Address Register (TAR) within a four-location boundary. BD0 reads/writes from TA. BD1 reads/writes from TA+4."/>
    <register addr="d100001c" rw_flags="RW" width="4" name="CS_APBAP_BD[3]" comment="BD0-BD3 provide a mechanism for directly mapping through DAP accesses to AHB transfers without having to rewrite the Transfer Address Register (TAR) within a four-location boundary. BD0 reads/writes from TA. BD1 reads/writes from TA+4."/>
    <register addr="d10000f8" rw_flags="R" width="4" name="CS_APBAP_ROM_TABLE_BASEADDR" comment="Base address of a ROM table."/>
    <register addr="d10000fc" rw_flags="R" width="4" name="CS_APBAP_IDR" comment="AHB-AP Identification Register"/>
  </block>
  <block name="pcr_config" comment="WLAN Processor platform configuration - ">
    <register addr="d0000000" rw_flags="R" width="4" name="PCR_VERSION" comment="Connected to CHIP_VERSION_ID from the pmu_remap register block."/>
    <register addr="d0000004" rw_flags="R" width="2" name="PCR_PERI_REGISTER_HASH" comment="Contains a 32bit hash of all the PERI register tree source used in the IP"/>
    <register addr="d0000008" rw_flags="RW" width="1" name="PCR_RST_CONFIG" comment="Processor platform reset configuration."/>
    <register addr="d000000c" rw_flags="RW" width="4" name="PCR_PIO_DRIVE" comment="PIO output values for PIO[16:0]"/>
    <register addr="d0000010" rw_flags="RW" width="4" name="PCR_PIO_DRIVE_EN" comment="PIO output enable for PIO[16:0]"/>
    <register addr="d0000014" rw_flags="R" width="4" name="PCR_PIO_STATUS" comment="PIO status values for PIO[16:0]"/>
    <register addr="d0000018" rw_flags="RW" width="4" name="PCR_QOS" comment="Quality of service values for the NIC-400 matrix AXI masters."/>
    <register addr="d000001c" rw_flags="RW" width="1" name="PCR_RMP_RGN0_BOOT" comment="PROC0 Boot Address Remapping Region 0 Enable"/>
    <register addr="d0000020" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[0]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="d0000024" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[1]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="d0000028" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[2]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="d000002c" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[3]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="d0000030" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[4]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="d0000034" rw_flags="RW" width="4" name="PCR_RMP_RGN_BASE[5]" comment="PROC0 Address Remapping Region N Start Address (4K address)"/>
    <register addr="d0000038" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[0]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="d000003c" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[1]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="d0000040" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[2]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="d0000044" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[3]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="d0000048" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[4]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="d000004c" rw_flags="RW" width="1" name="PCR_RMP_RGN_SIZE[5]" comment="PROC0 Address Remapping Region N Size (multiples of 4K bytes)"/>
    <register addr="d0000050" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[0]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="d0000054" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[1]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="d0000058" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[2]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="d000005c" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[3]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="d0000060" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[4]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="d0000064" rw_flags="RW" width="4" name="PCR_RMP_RGN_OFST[5]" comment="PROC0 Address Remapping Region N Offset (4K bytes)"/>
    <register addr="d0000068" rw_flags="RW" width="1" name="PCR_QREQ_OFF_XDMA" comment="XDMA Q-channel override. Setting to '1' overrides the Q-channel clock gating and forces the clock gate on."/>
    <register addr="d000006c" rw_flags="RW" width="2" name="PCR_DRAM_EARLY_WAKEUP" comment="DRAM early wakeup counter setting. When this changes from zero to non-zero this triggers the logic to capture the new non-zero value."/>
    <register addr="d0000070" rw_flags="RW" width="1" name="PCR_FLEXI_PROC_POR_RESET" comment="FlexiMac processor power-on reset software control. This resets all of the M3 logic."/>
    <register addr="d0000074" rw_flags="RW" width="1" name="PCR_FLEXI_PROC_SYS_RESET" comment="FlexiMac processor sys reset control. This resets just the core logic, not the debug logic."/>
    <register addr="d0000078" rw_flags="RW" width="1" name="PCR_FLEXI_MTX_CLOCK_EN" comment="FlexiMac processor platform interconnect matrix permanent clock enables."/>
    <register addr="d000007c" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[0]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="d0000080" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[1]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="d0000084" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[2]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="d0000088" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[3]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="d000008c" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[4]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="d0000090" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[5]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="d0000094" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[6]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="d0000098" rw_flags="RW" width="4" name="PCR_SIM_MAILBOX[7]" comment="Handy registers to make simulation testing much easier. Can be directly used in FPGAs for debug."/>
    <register addr="d000009c" rw_flags="R" width="4" name="PCR_REGS_FAILED_ADDRESS" comment="Address of last register access that failed to complete successfully, usually resulting in a CPU abort of some sort."/>
    <register addr="d00000a0" rw_flags="RW" width="1" name="PCR_REGS_STATUS" comment="Observe the register bus failure status. Write to a field to clear it."/>
    <register addr="d00000a4" rw_flags="R" width="2" name="RANDOM_NUMBER" comment="Random number. Enable generation by setting CLOCK_ENABLE_40_RAND to '1'."/>
    <register addr="d00000a8" rw_flags="RW" width="1" name="PCR_DEBUG_SEL" comment="Processor platform debug selection"/>
    <register addr="d00000ac" rw_flags="RW" width="1" name="PCR_SEMAPHORE[0]" comment="Array of single bit semaphore registers."/>
    <register addr="d00000b0" rw_flags="RW" width="1" name="PCR_SEMAPHORE[1]" comment="Array of single bit semaphore registers."/>
    <register addr="d00000b4" rw_flags="RW" width="1" name="PCR_SEMAPHORE[2]" comment="Array of single bit semaphore registers."/>
    <register addr="d00000b8" rw_flags="RW" width="1" name="PCR_SEMAPHORE[3]" comment="Array of single bit semaphore registers."/>
    <register addr="d00000bc" rw_flags="RW" width="1" name="PCR_ETM_EXT_ENABLE_MASK" comment="Bitfield. Enable bit(s) to allow the ETM EXT bus from the R4 to propagate to the CoreSight block.."/>
    <register addr="d00000c0" rw_flags="RW" width="2" name="PCR_IPC_OUT_CLEAR" comment="Inter-processor communication interrupt requests to other CPUs."/>
    <register addr="d00000c4" rw_flags="RW" width="2" name="PCR_IPC_OUT_SET" comment="Inter-processor communication interrupt requests to other CPUs."/>
    <register addr="d00000c8" rw_flags="R" width="2" name="PCR_IPC_IN" comment="Inter-processor communication interrupt status from other CPUs."/>
    <register addr="d00000cc" rw_flags="RW" width="4" name="CORTEX_RAM_RETENTION_CONFIG_DCACHE" comment="Config for allowing auto-retention of DCACHE."/>
    <register addr="d00000d0" rw_flags="RW" width="4" name="CORTEX_RAM_RETENTION_CONFIG_ICACHE" comment="Config for allowing auto-retention of ICACHE."/>
    <register addr="d00000d4" rw_flags="RW" width="4" name="CORTEX_RAM_RETENTION_CONFIG_DTCM" comment="Config for allowing auto-retention of DTCM."/>
    <register addr="d00000d8" rw_flags="RW" width="4" name="CORTEX_RAM_RETENTION_CONFIG_ITCM" comment="Config for allowing auto-retention of ITCM."/>
    <register addr="d00000dc" rw_flags="RW" width="4" name="CORTEX_RAM_RETENTION_CONFIG_SCU" comment="Config for allowing auto-retention of SCU."/>
    <register addr="d00000e0" rw_flags="RW" width="2" name="PCR_MIF_CDC_CONFIG" comment="Configuration for MIC AXI CDC block."/>
    <register addr="d00000e4" rw_flags="R" width="1" name="PCR_MIF_CDC_STATUS" comment="Status for MIC AXI CDC block."/>
    <register addr="d00000e8" rw_flags="RW" width="1" name="INTRA_WLAN_IPC_CLEAR" comment="IPC register going to all WLMACPHY instances, plus all UCPUs, as interrupt sources. Each bit is independently settable and clearable by writing 1 to the _SET or _CLEAR register in the appropriate bit position."/>
    <register addr="d00000ec" rw_flags="RW" width="1" name="INTRA_WLAN_IPC_SET" comment="IPC register going to all WLMACPHY instances, plus all UCPUs, as interrupt sources. Each bit is independently settable and clearable by writing 1 to the _SET or _CLEAR register in the appropriate bit position."/>
    <register addr="d00000f0" rw_flags="RW" width="2" name="PCR_WL_ADC_COMMON_CFG[0]" comment="See  https://edm2.sec.samsung.net/cc/link/verLink/156386419952804570/1, SC Design Team &amp;gt; Analog Group &amp;gt; Project &amp;gt; FRD5840_Opera &amp;gt; 4_Setting_guide (there may be a later FRD5008W one) "/>
    <register addr="d00000f4" rw_flags="RW" width="4" name="PCR_WL_ADC_CFG[0]" comment=""/>
    <register addr="d00000f8" rw_flags="RW" width="4" name="PCR_WL_ADC_CTRLI[0]" comment=""/>
    <register addr="d00000fc" rw_flags="RW" width="4" name="PCR_WL_ADC_CTRLQ[0]" comment=""/>
    <register addr="d0000100" rw_flags="RW" width="1" name="PCR_WL_DAC_COMMON_CFG[0]" comment="See  https://edm2.sec.samsung.net/cc/link/verLink/156386419952804570/1, SC Design Team &amp;gt; Analog Group &amp;gt; Project &amp;gt; FRD5840_Opera &amp;gt; 4_Setting_guide (there may be a later FRD5008W one) "/>
    <register addr="d0000104" rw_flags="RW" width="2" name="PCR_WL_DAC_CFG[0]" comment=""/>
    <register addr="d0000108" rw_flags="RW" width="2" name="PCR_WL_DAC_CTR_CM[0]" comment=""/>
    <register addr="d000010c" rw_flags="RW" width="4" name="PCR_WL_DAC_CTRLI[0]" comment=""/>
    <register addr="d0000110" rw_flags="RW" width="4" name="PCR_WL_DAC_CTRLQ[0]" comment=""/>
    <register addr="d0000114" rw_flags="RW" width="1" name="PCR_WL_DAC_MSB_CTRLI[0]" comment="Most Significant Bits on the DAC I control bus. Bit 35:32"/>
    <register addr="d0000118" rw_flags="RW" width="1" name="PCR_WL_DAC_MSB_CTRLQ[0]" comment="Most Significant Bits on the DAC Q control bus. Bit 35:32"/>
    <register addr="d000011c" rw_flags="RW" width="1" name="WLAN_ABB_DAC_INVERT_EN[0]" comment="Set to 1 to invert the DAC clock (index = DAC ID). This is expected to be required if the DAC and Timestamping clocks are deemed to be in a metastable phase."/>
    <register addr="d0000120" rw_flags="RW" width="1" name="WLAN_ABB_ADC_INVERT_EN[0]" comment="Set to 1 to invert the ADC clock (index = ADC ID). This is expected to be required if the ADC and Timestamping clocks are deemed to be in a metastable phase."/>
    <register addr="d0000124" rw_flags="RW" width="1" name="WLAN_ABB_DAC_PHY_PORT_SEL[0]" comment="Select which PHY PORT is connected to a DAC (if any). The register index is the DAC ID (see REGDEF_WLAN_ABB_DAC_ID), and the value is the PHY PORT."/>
    <register addr="d0000128" rw_flags="RW" width="1" name="WLAN_ABB_PHY_LH_DAC_CLK_SEL[0]" comment="Select whether this PHY's DAC (PHY2ABB) LongHop uses the PORT0 (0) or PORT1 (1) DAC clock. The register index is PHY ID (see REGDEF_WLAN_ABB_PHY_ID)."/>
    <register addr="d000012c" rw_flags="RW" width="1" name="WLAN_ABB_PHY_PORT_ADC_SEL[0]" comment="Select which ADC is connected to each PHY PORT (if any). The register index is PHY ID (see REGDEF_WLAN_ABB_PHY_ID)."/>
    <register addr="d0000130" rw_flags="RW" width="1" name="WLAN_ABB_PHY_LH_ADC_CLK_SEL[0]" comment="Select whether this PHY's ADC (ABB2PHY) LongHop uses the PORT0 (0) or PORT1 (1) DAC clock. The register index is PHY ID (see REGDEF_WLAN_ABB_PHY_ID)."/>
    <register addr="d0000134" rw_flags="RW" width="1" name="WLAN_ABB_TS_CFG" comment="WLAN ABB timestamp configuration."/>
    <register addr="d0000138" rw_flags="R" width="4" name="WLAN_ABB_TS_DAC_STATUS[0]" comment="The DAC timestamp values. The index is the DAC ID."/>
    <register addr="d000013c" rw_flags="R" width="4" name="WLAN_ABB_TS_ADC_STATUS[0]" comment="The ADC timestamp values. The index is the ADC ID."/>
    <register addr="d0000140" rw_flags="R" width="1" name="WLAN_ABB_TS_DAC_METASTABILITY_DETECTED" comment="The DAC timestamp values may be inccurate by a +/- 1 clock cycles. Consider toggling WLAN_ABB_DAC_INVERT_EN. The index is the DAC ID."/>
    <register addr="d0000144" rw_flags="R" width="1" name="WLAN_ABB_TS_ADC_METASTABILITY_DETECTED" comment="The ADC timestamp values may be inccurate by a +/- 1 clock cycles. Consider toggling WLAN_ABB_ADC_INVERT_EN. The index is the ADC ID."/>
    <register addr="d0000148" rw_flags="W" width="1" name="WLAN_ABB_TS_DAC_METASTABILITY_DETECTED_CLR" comment="Write 1 to clear corresponding WLAN_ABB_TS_DAC_METASTABILITY_DETECTED "/>
    <register addr="d000014c" rw_flags="W" width="1" name="WLAN_ABB_TS_ADC_METASTABILITY_DETECTED_CLR" comment="Write 1 to clear corresponding WLAN_ABB_TS_ADC_METASTABILITY_DETECTED "/>
    <register addr="d0000150" rw_flags="RW" width="1" name="WLAN_ABB_LH_DEBUG_CONTROL[0][0]" comment="Enable NIFs to allow CHECKSUMs to be captured"/>
    <register addr="d0000154" rw_flags="R" width="2" name="WLAN_ABB_LH_DEBUG_RX_STATUS[0][0][0]" comment="CHECKSUM for RX IQ monitor"/>
    <register addr="d0000158" rw_flags="R" width="2" name="WLAN_ABB_LH_DEBUG_TX_STATUS[0][0][0]" comment="CHECKSUM for TX IQ monitor"/>
    <register addr="d000015c" rw_flags="RW" width="2" name="WLAN_ABB_LH_PHY_CONFIG[0][0]" comment="Control bits for the ABB end of the longhop.."/>
    <register addr="d0000160" rw_flags="RW" width="2" name="WLAN_ABB_LH_PHY2ABB_QCH_CTRL[0][0]" comment="Control bits for the ABB end of the longhop (PHY2ABB) QCH manager."/>
    <register addr="d0000164" rw_flags="R" width="4" name="WLAN_ABB_LH_PHY2ABB_QCH_STATUS[0][0]" comment="Status bits for the ABB end of the longhop (PHY2ABB) Q-channel manager."/>
    <register addr="d0000168" rw_flags="RW" width="1" name="WLAN_ABB_LH_PHY2ABB_PCH_CTRL[0][0]" comment="Control bits for the ABB end of the longhop (PHY2ABB) PCH manager."/>
    <register addr="d000016c" rw_flags="R" width="4" name="WLAN_ABB_LH_PHY2ABB_PCH_STATUS[0][0]" comment="Status bits for the ABB end of the longhop (PHY2ABB) P-channel manager."/>
    <register addr="d0000170" rw_flags="RW" width="2" name="WLAN_ABB_LH_ABB2PHY_QCH_CTRL[0][0]" comment="Control bits for the ABB end of the longhop (ABB2PHY) QCH manager."/>
    <register addr="d0000174" rw_flags="R" width="4" name="WLAN_ABB_LH_ABB2PHY_QCH_STATUS[0][0]" comment="Status bits for the ABB end of the longhop (ABB2PHY) Q-channel manager."/>
    <register addr="d0000178" rw_flags="RW" width="1" name="WLAN_ABB_LH_ABB2PHY_PCH_CTRL[0][0]" comment="Control bits for the ABB end of the longhop (ABB2PHY) PCH manager."/>
    <register addr="d000017c" rw_flags="R" width="4" name="WLAN_ABB_LH_ABB2PHY_PCH_STATUS[0][0]" comment="Status bits for the ABB end of the longhop (ABB2PHY) P-channel manager."/>
  </block>
  <block name="pcr_ticker" comment="Processor basic timer">
    <register addr="d0100000" rw_flags="R" width="4" name="TCKR_VALUE" comment="Current value of the ticker"/>
    <register addr="d0100004" rw_flags="RW" width="4" name="TCKR_ALARM[0]" comment="Set the Proc alarm value. As a side effect - clears the corresponding interrupt line"/>
    <register addr="d0100008" rw_flags="RW" width="4" name="TCKR_ALARM[1]" comment="Set the Proc alarm value. As a side effect - clears the corresponding interrupt line"/>
    <register addr="d010000c" rw_flags="RW" width="4" name="TCKR_ALARM[2]" comment="Set the Proc alarm value. As a side effect - clears the corresponding interrupt line"/>
    <register addr="d0100010" rw_flags="RW" width="1" name="TCKR_CTRL[0]" comment="The Proc alarm control register"/>
    <register addr="d0100014" rw_flags="RW" width="1" name="TCKR_CTRL[1]" comment="The Proc alarm control register"/>
    <register addr="d0100018" rw_flags="RW" width="1" name="TCKR_CTRL[2]" comment="The Proc alarm control register"/>
  </block>
  <block name="wl_mac" comment="WLan MAC top level registers and enumerations for 802.11 protocol, Commands and Indications">
    <register addr="d2110000" rw_flags="RW" width="1" name="CLKGEN_MAC_ENABLES" comment="This register enables clocks for MAC"/>
    <register addr="d2110004" rw_flags="RW" width="1" name="MAC_DEBUG_SEL" comment="Select MAC debug port output (this is in addition to MAC IF and MAC ACC ports)"/>
    <register addr="d2110008" rw_flags="R" width="2" name="MAC_DEBUG_STATUS" comment="Read MAC debug {MAC_ACC, MAC_IF}"/>
  </block>
  <block name="wl_shared" comment="Wireless LAN shared registers">
    <register addr="d2100000" rw_flags="RW" width="1" name="WL_DEBUG_SEL" comment="Select for WLan_pd level debug mux"/>
    <register addr="d2100004" rw_flags="R" width="2" name="WL_DEBUG_STATUS" comment="Debug data at WLan_pd level"/>
    <register addr="d2100008" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_3_0" comment="Select for WLan_pd level debug mux"/>
    <register addr="d210000c" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_7_4" comment="Select for WLan_pd level debug mux"/>
    <register addr="d2100010" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_11_8" comment="Select for WLan_pd level debug mux"/>
    <register addr="d2100014" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_15_12" comment="Select for WLan_pd level debug mux"/>
    <register addr="d2100018" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_0_SEL" comment="Source bus select for intermediate bus 0 (select one of up to 32 busses)"/>
    <register addr="d210001c" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_1_SEL" comment="Source bus select for intermediate bus 1 (select one of up to 32 busses)"/>
    <register addr="d2100020" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_2_SEL" comment="Source bus select for intermediate bus 2 (select one of up to 32 busses)"/>
    <register addr="d2100024" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_3_SEL" comment="Source bus select for intermediate bus 3 (select one of up to 32 busses)"/>
  </block>
  <block name="xdmac_0" comment="XDMAC registers - derived from http://cognidox/vdocs/SC-507020-DD-A-XDMA%20Register%20Map.pdf. Not instanced in the RTL.">
    <register addr="d200000c" rw_flags="R" width="1" name="XDMAC_INT_TC_STATUS_I0" comment="Transfer Complete Interrupt Status Register."/>
    <register addr="d2000010" rw_flags="W" width="1" name="XDMAC_INT_TC_CLR_I0" comment="Transfer Complete Interrupt Clear Register (Value is not meaningful)"/>
    <register addr="d2000014" rw_flags="RW" width="1" name="XDMAC_INT_TC_MASK_I0" comment="Transfer Complete Interrupt Mask Register (0: Interrupt disabled, 1 : Interrupt enabled)"/>
    <register addr="d2000018" rw_flags="R" width="1" name="XDMAC_ERR_STATUS_I0" comment="Error Interrupt Status Register"/>
    <register addr="d200001c" rw_flags="W" width="1" name="XDMAC_INT_ERR_CLR_I0" comment="Error Interrupt Clear Register"/>
    <register addr="d2000020" rw_flags="RW" width="1" name="XDMAC_INT_ERR_MASK_I0" comment="Error Interrupt Mask Register (0: Interrupt disabled, 1 : Interrupt enabled)"/>
    <register addr="d2000024" rw_flags="W" width="1" name="XDMAC_START_I0" comment="DMA Transfer Start (Value is not meaningful). Do NOT start DMA again until the previously started DMA transfer is completed."/>
    <register addr="d2000028" rw_flags="RW" width="1" name="XDMAC_ICG_DISABLE_I0" comment="Internal clock gating is disabled (0 : Clock gating enabled, 1 : Clock gating disabled)"/>
    <register addr="d200002c" rw_flags="RW" width="4" name="XDMAC_CONFIG_I0" comment="Configuration Register"/>
    <register addr="d2000030" rw_flags="RW" width="4" name="XDMAC_LLI_SRC_ADDR_I0" comment="Source Address Register (Linked List Item)"/>
    <register addr="d2000034" rw_flags="RW" width="4" name="XDMAC_LLI_DST_ADDR_I0" comment="Destination Address Register (Linked List Item)"/>
    <register addr="d2000038" rw_flags="RW" width="4" name="XDMAC_LLI_NXT_ADDR_I0" comment="Next Address Register to indicate the next linked list item (Linked List Item)"/>
    <register addr="d200003c" rw_flags="RW" width="4" name="XDMAC_LLI_CTRL_I0" comment=""/>
    <register addr="d2000040" rw_flags="R" width="1" name="XDMAC_DMA_STATUS_I0" comment="DMA active status. 1 = active. 0 = idle"/>
    <register addr="d2000044" rw_flags="R" width="1" name="XDMAC_DMA_COUNT_I0" comment="Number of DMA list entries processed for the current operation."/>
  </block>
</subsystem>
