<?xml version="1.0" encoding="utf-8"?>

<!--
(c) SCSC 2015-2016 autogenerated by moredump.py as part of 'drun prep'.
  Changes made to this file may cause incorrect behaviour and will be lost if it is regenerated.

  XML file defining registers for pert subsystem moredump
  Chip hash: a056


-->

<subsystem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.samsung.com ../Registers.xsd"
  name="pert">
  <block name="alive_pad_control" comment="ALIVE pad control registers">
    <register addr="52000000" rw_flags="RW" width="1" name="BBIC_PAD_CONTROL_RFIC_CTRL[0]" comment="Control register for pad RFIC_CTRL"/>
    <register addr="52000004" rw_flags="RW" width="1" name="BBIC_PAD_CONTROL_RFIC_CTRL[1]" comment="Control register for pad RFIC_CTRL"/>
    <register addr="52000008" rw_flags="RW" width="1" name="BBIC_PAD_CONTROL_RFIC_CTRL[2]" comment="Control register for pad RFIC_CTRL"/>
    <register addr="5200000c" rw_flags="RW" width="1" name="BBIC_PAD_CONTROL_RFIC_CTRL[3]" comment="Control register for pad RFIC_CTRL"/>
    <register addr="52000010" rw_flags="RW" width="1" name="BBIC_RFIC_CTRL_MUX_CTRL[0]" comment=""/>
    <register addr="52000014" rw_flags="RW" width="1" name="BBIC_RFIC_CTRL_MUX_CTRL[1]" comment=""/>
    <register addr="52000018" rw_flags="RW" width="1" name="BBIC_RFIC_CTRL_MUX_CTRL[2]" comment=""/>
    <register addr="5200001c" rw_flags="RW" width="1" name="BBIC_RFIC_CTRL_MUX_CTRL[3]" comment=""/>
    <register addr="52000020" rw_flags="R" width="1" name="BBIC_PAD_STATUS_RFIC_CTRL[0]" comment=""/>
    <register addr="52000024" rw_flags="R" width="1" name="BBIC_PAD_STATUS_RFIC_CTRL[1]" comment=""/>
    <register addr="52000028" rw_flags="R" width="1" name="BBIC_PAD_STATUS_RFIC_CTRL[2]" comment=""/>
    <register addr="5200002c" rw_flags="R" width="1" name="BBIC_PAD_STATUS_RFIC_CTRL[3]" comment=""/>
  </block>
  <block name="alive_pio_mux" comment="PIO mux control">
    <register addr="51000000" rw_flags="RW" width="2" name="PIO_INVERT_ENABLES" comment="Set a bit to 1 to invert the driven output."/>
    <register addr="51000004" rw_flags="R" width="2" name="PIO_INPUT_STATUS" comment="The PIO input status(after loopback)."/>
    <register addr="51000008" rw_flags="R" width="2" name="PIO_OUTPUT_STATUS" comment="The PIO output status."/>
    <register addr="5100000c" rw_flags="RW" width="4" name="PIO_IRQ_SELECT" comment=""/>
    <register addr="51000010" rw_flags="RW" width="2" name="PIO_CFG[0]" comment=""/>
    <register addr="51000014" rw_flags="RW" width="2" name="PIO_CFG[1]" comment=""/>
    <register addr="51000018" rw_flags="RW" width="2" name="PIO_CFG[2]" comment=""/>
    <register addr="5100001c" rw_flags="RW" width="2" name="PIO_CFG[3]" comment=""/>
    <register addr="51000020" rw_flags="RW" width="2" name="PIO_CFG[4]" comment=""/>
    <register addr="51000024" rw_flags="RW" width="2" name="PIO_CFG[5]" comment=""/>
    <register addr="51000028" rw_flags="RW" width="2" name="PIO_CFG[6]" comment=""/>
    <register addr="5100002c" rw_flags="RW" width="2" name="PIO_CFG[7]" comment=""/>
    <register addr="51000030" rw_flags="RW" width="2" name="PIO_CFG[8]" comment=""/>
    <register addr="51000034" rw_flags="RW" width="2" name="PIO_CFG[9]" comment=""/>
    <register addr="51000038" rw_flags="RW" width="2" name="PIO_CFG[10]" comment=""/>
    <register addr="5100003c" rw_flags="RW" width="2" name="PIO_CFG[11]" comment=""/>
    <register addr="51000040" rw_flags="RW" width="2" name="PIO_CFG[12]" comment=""/>
    <register addr="51000044" rw_flags="RW" width="2" name="PIO_CFG[13]" comment=""/>
    <register addr="51000048" rw_flags="RW" width="2" name="PIO_CFG[14]" comment=""/>
    <register addr="5100004c" rw_flags="RW" width="2" name="PIO_CFG[15]" comment=""/>
    <register addr="51000050" rw_flags="RW" width="4" name="DEBUG_SERIALISER_CFG[0]" comment="Main Serialiser Config"/>
    <register addr="51000054" rw_flags="RW" width="4" name="DEBUG_SERIALISER_8B10B_CFG[0]" comment="8B10B mode Serialiser Config"/>
    <register addr="51000058" rw_flags="RW" width="4" name="DEBUG_SERIALISER_CFG[1]" comment="Main Serialiser Config"/>
    <register addr="5100005c" rw_flags="RW" width="4" name="DEBUG_SERIALISER_8B10B_CFG[1]" comment="8B10B mode Serialiser Config"/>
    <register addr="51000060" rw_flags="RW" width="4" name="DEBUG_SERIALISER_SW_DATA" comment="SW Driven data for serialisers"/>
    <register addr="51000064" rw_flags="RW" width="1" name="BBIC_CAPTURE_TRIG_MUX_CTRL" comment=""/>
    <register addr="51000068" rw_flags="RW" width="4" name="DEBUG_DESERIALISER_CFG" comment="Configuration for the RFIC debug de-serialisers"/>
    <register addr="5100006c" rw_flags="RW" width="4" name="DEBUG_DESERIALISER_CFG2" comment="Second configuration register for the RFIC debug de-serialisers"/>
    <register addr="51000070" rw_flags="RW" width="4" name="DEBUG_DESERIALISER_CFG3" comment="Third configuration register for the RFIC debug de-serialisers"/>
    <register addr="51000074" rw_flags="RW" width="2" name="DEBUG_DESERIALISER_CFG4" comment="Fourth configuration register for the RFIC debug de-serialisers"/>
    <register addr="51000078" rw_flags="R" width="2" name="DEBUG_DESERIALISER_ERROR_COUNTER_8B10B_DECODE" comment="Count of errors since last cleared "/>
    <register addr="5100007c" rw_flags="R" width="2" name="DEBUG_DESERIALISER_ERROR_COUNTER_8B10B_SYNC" comment="Count of errors since last cleared "/>
    <register addr="51000080" rw_flags="R" width="2" name="DEBUG_DESERIALISER_ERROR_COUNTER_8B10B_DISP" comment="Count of errors since last cleared "/>
    <register addr="51000084" rw_flags="R" width="2" name="DEBUG_DESERIALISER_ERROR_COUNTER_8B10B_CRC" comment="Count of errors since last cleared "/>
    <register addr="51000088" rw_flags="R" width="4" name="DEBUG_DESERIALISER_STATUS" comment="Status register for the RFIC debug de-serialisers"/>
    <register addr="5100008c" rw_flags="R" width="4" name="DEBUG_DESERIALISER_MONITOR" comment="Monitor register for the RFIC debug de-serialisers"/>
  </block>
  <block name="axi_monitor" comment="Monitor transactions on the AXI bus.">
    <register addr="54000000" rw_flags="RW" width="1" name="AXI_MON_ENABLE" comment="Enable the AXI monitor. Enabled by default because turning it on at any point would mean probably missing something and getting out of sync."/>
    <register addr="54000004" rw_flags="RW" width="1" name="AXI_MON_ID_MASK" comment="Bitfield indicating from which AXI ID(s) bits to to check in burst transactions. If 0, all masters are monitored. If mask is non-zero then if a matching value in AXI_MON_ID_VALUE for the bits set here is true then monitoring occurs."/>
    <register addr="54000008" rw_flags="RW" width="1" name="AXI_MON_ID_VALUE" comment="Value to match the incoming AXI ID against."/>
    <register addr="5400000c" rw_flags="R" width="4" name="AXI_MON_READ_BURST_COUNT" comment="Count of the number of read burst transactions on the AXI read channel."/>
    <register addr="54000010" rw_flags="R" width="4" name="AXI_MON_READ_BYTE_COUNT" comment="Count of the number of bytes transferred in the read burst transactions on the AXI read channel."/>
    <register addr="54000014" rw_flags="R" width="4" name="AXI_MON_WRITE_BURST_COUNT" comment="Count of the number of write burst transactions on the AXI read channel."/>
    <register addr="54000018" rw_flags="R" width="4" name="AXI_MON_WRITE_BYTE_COUNT" comment="Count of the number of bytes transferred in the write burst transactions on the AXI write channel."/>
    <register addr="5400001c" rw_flags="R" width="4" name="AXI_MON_OUTSTANDING_STATUS" comment="Dynamic status of outstanding reads/writes"/>
    <register addr="54000020" rw_flags="R" width="4" name="AXI_MON_OUTSTANDING_STATUS_MAX" comment="Maximum value of outstanding reads/writes since last clear."/>
    <register addr="54000024" rw_flags="W" width="1" name="AXI_MON_OUTSTANDING_STATUS_MAX_CLEAR" comment="Clear status of outstanding reads/writes"/>
  </block>
  <block name="pmu" comment="PMU config and status registers.">
    <register addr="50000000" rw_flags="RW" width="1" name="PMU_INT_SOURCE_WAKE_EVENT_SEL_PULSE" comment="Set to 1 to select a single-cycle pulse for the deep sleep wake event rather than a level."/>
    <register addr="50000004" rw_flags="RW" width="2" name="PMU_PIO_DRIVE" comment="PIO drive"/>
    <register addr="50000008" rw_flags="RW" width="2" name="PMU_PIO_DRIVE_ENABLE" comment="PIO drive enable"/>
    <register addr="5000000c" rw_flags="R" width="2" name="PMU_PIO_STATUS" comment="PIO status"/>
    <register addr="50000010" rw_flags="RW" width="1" name="RTC_IRQ_EN" comment="RTC Interrupt enable. Any writes to this register also clear any RTC interrupt."/>
    <register addr="50000014" rw_flags="RW" width="1" name="PMU_RFIC_STATUS" comment="Identifies the cause of the RFIC_EVENT interrupt. Each one can be selectively enabled by the MASK registers "/>
    <register addr="50000018" rw_flags="RW" width="1" name="PMU_RFIC_MASK" comment="Allows RFIC_CTRL inputs to be enabled to generate an RFIC_EVENT interrupt"/>
    <register addr="5000001c" rw_flags="RW" width="1" name="PMU_RESOURCE_REQ" comment="Outgoing resource requests from WLBT to AP/CP. Leave the requests asserted until no longer required."/>
    <register addr="50000020" rw_flags="R" width="1" name="PMU_RESOURCE_ACK" comment="Outgoing resource request status/acknowledgement"/>
    <register addr="50000024" rw_flags="R" width="1" name="PMU_AP2WB_REQ" comment="Incoming requests from AP to WLBT."/>
    <register addr="50000028" rw_flags="RW" width="1" name="PMU_WB2AP_ACK" comment="Outgoing acknowledgement from WLBT to AP."/>
    <register addr="5000002c" rw_flags="RW" width="1" name="PMU_EXT_RESET_REQUEST" comment="Requests and status out of WLBT"/>
    <register addr="50000030" rw_flags="RW" width="1" name="PMU_MISC_CONTROL" comment="Miscellaneous control signals"/>
    <register addr="50000034" rw_flags="RW" width="1" name="QCH_FORCE_EN" comment="Q-channel manager force clock enable"/>
    <register addr="50000038" rw_flags="RW" width="1" name="PMU_IPC" comment="IPC comms with WLAN and WPAN."/>
    <register addr="5000003c" rw_flags="RW" width="1" name="WPAN_SLEEPDEEP" comment=""/>
    <register addr="50000040" rw_flags="RW" width="1" name="DEEP_SLEEP_CMD" comment="This register is used to trigger events in the sleep block"/>
    <register addr="50000044" rw_flags="RW" width="4" name="DEEP_SLEEP_WAKEUP_ENABLES" comment="This register controls the sources which can cause deep sleep wakeup. Functions are enabled by setting individual bits. Bits are enumerated  as DEEP_SLEEP_WAKEUP.  "/>
    <register addr="50000048" rw_flags="R" width="4" name="DEEP_SLEEP_STATUS" comment="This register indicates the currently-active deep sleep wakeup sources."/>
    <register addr="5000004c" rw_flags="R" width="4" name="DEEP_SLEEP_STATUS_STICKY" comment="This register returns a sticky version of DEEP_SLEEP_STATUS, recording all wakeup events since it was last cleared. Bits are enumerated  as DEEP_SLEEP_WAKEUP.  "/>
    <register addr="50000050" rw_flags="R" width="4" name="SLOW_CLK_TIMER_STATUS" comment="A free-running slow clock counter"/>
    <register addr="50000054" rw_flags="RW" width="4" name="SLOW_CLK_TIMER_EVENT" comment="When the timer matches this count a deep sleep wakeup event will be triggered"/>
    <register addr="50000058" rw_flags="RW" width="1" name="WATCHDOG_ENABLE" comment="Writing '1' enables the watchdog regardless of its previous state and resets its state machine to WATCHDOG_STATUS_FSM_ENABLED."/>
    <register addr="5000005c" rw_flags="RW" width="1" name="WATCHDOG_DISABLE" comment="Writing the 3 disable codes in sequence to this register will disable the watchdog. Writing WATCHDOG_DEBUG_CODE3 instead of WATCHDOG_DISABLE_CODE3 will set the watchdog into debug mode. Each correct code written will advance the WATCHDOG_STATUS by 1 until it reaches 3. A status of 3 indicates that the watchdog has been disabled A status of 4 indicates that the watchdog is in debug mode. If an incorrect code is written at any time, the status will revert to 0 (enabled). The watchdog will not stop counting down until all three codes have been written correctly."/>
    <register addr="50000060" rw_flags="RW" width="4" name="WATCHDOG_DELAY" comment="This is the reset value for the watchdog countdown. The reset value is 0xFFFF which allows a countdown period of 2 seconds. The maximum value of 0xFFFFFFFF allows for a sleep time of around 37 hours"/>
    <register addr="50000064" rw_flags="RW" width="1" name="WATCHDOG_KICK" comment="Writing to this register causes the countdown value to be reset to the value stored in WATCHDOG_DELAY. WATCHDOG_DELAY is captured into the slow clock domain after a cycle or two. The register fields WATCHDOG_STATUS_KICK_PENDING and WATCHDOG_STATUS_SLOW_KICK_PENDING indicate if this register has already been written and an update is currently pending. Writing this register toggles a flag inside the watchdog logic so writing it a second time before the first has successfully propagated will clear the toggle and cancel the kick."/>
    <register addr="50000068" rw_flags="R" width="1" name="WATCHDOG_STATUS" comment="Watchdog status compound register."/>
    <register addr="5000006c" rw_flags="RW" width="1" name="ALIVE_RESET" comment="Resets for main MXL140 clock generator, WLBT toplevel"/>
    <register addr="50000070" rw_flags="RW" width="1" name="ALIVE_CLOCK_ENABLE" comment="Enables for ALIVE clock generator"/>
    <register addr="50000074" rw_flags="RW" width="1" name="ALIVE_CLOCK_ENABLE2" comment="Enables for ALIVE clock generator"/>
    <register addr="50000078" rw_flags="RW" width="1" name="WLAN_CLOCK_ENABLE" comment="Controls for main clock generator"/>
    <register addr="5000007c" rw_flags="RW" width="1" name="WPLL_CONTROLS_0" comment="PLL controls"/>
    <register addr="50000080" rw_flags="RW" width="1" name="WPLL_CONTROLS_1" comment="PLL controls"/>
    <register addr="50000084" rw_flags="RW" width="1" name="WPLL_CONTROLS_2" comment="PLL controls"/>
    <register addr="50000088" rw_flags="RW" width="1" name="WPLL_CONTROLS_3" comment="PLL controls"/>
    <register addr="5000008c" rw_flags="RW" width="2" name="WPLL_CONTROLS_4" comment="PLL controls"/>
    <register addr="50000090" rw_flags="RW" width="1" name="WPLL_CONTROLS_5" comment="PLL controls"/>
    <register addr="50000094" rw_flags="RW" width="1" name="WPLL_CONTROLS_6" comment="PLL controls"/>
    <register addr="50000098" rw_flags="RW" width="1" name="WPLL_CONTROLS_7" comment="PLL controls"/>
    <register addr="5000009c" rw_flags="RW" width="1" name="WPLL_CONTROLS_8" comment="PLL controls"/>
    <register addr="500000a0" rw_flags="RW" width="1" name="WPLL_CONTROLS_9" comment="PLL controls"/>
    <register addr="500000a4" rw_flags="RW" width="1" name="WPLL_CONTROLS_10" comment="PLL controls"/>
    <register addr="500000a8" rw_flags="RW" width="1" name="WPLL_CONTROLS_11" comment="PLL controls"/>
    <register addr="500000ac" rw_flags="RW" width="1" name="WPLL_CONTROLS_12" comment="PLL controls"/>
    <register addr="500000b0" rw_flags="RW" width="1" name="WPLL_CONTROLS_13" comment="PLL controls"/>
    <register addr="500000b4" rw_flags="RW" width="4" name="WPLL_FVALUE" comment="PLL F controls"/>
    <register addr="500000b8" rw_flags="RW" width="4" name="WPLL_KVALUE" comment="PLL K controls"/>
    <register addr="500000bc" rw_flags="R" width="1" name="WPLL_STATUS" comment=""/>
    <register addr="500000c0" rw_flags="RW" width="1" name="PD_CONTROL_WLAN" comment="Controls the state of switches, isolation and reset in WLAN power domain"/>
    <register addr="500000c4" rw_flags="RW" width="1" name="PD_CONTROL_WPAN" comment="Controls the state of switches, isolation and reset in WPAN power domain"/>
    <register addr="500000c8" rw_flags="R" width="1" name="PD_STATUS" comment="Indicates the status of the switches in each power domain"/>
    <register addr="500000cc" rw_flags="RW" width="1" name="RAM_POWER_CONTROL" comment="The RAM retention controls for the WLAN PD and WPAN PD processor platforms."/>
    <register addr="500000d0" rw_flags="RW" width="1" name="PAD_RETENTION" comment="Pad retention controls."/>
    <register addr="500000d4" rw_flags="RW" width="2" name="PROC_CONFIG" comment="WLAN PD processor platform configuration."/>
    <register addr="500000d8" rw_flags="RW" width="1" name="DEBUG_SOURCE_SELECT" comment="Select the ouput on DEBUG_OUT[15:0] on the PMU"/>
    <register addr="500000dc" rw_flags="RW" width="1" name="SWEEPER_CONTROL" comment="Controls the Sweeper modules in WLBT. Set to 1 to start a sweeper clean. Return to 0 once the ACK for that sweeper is set."/>
    <register addr="500000e0" rw_flags="R" width="1" name="SWEEPER_STATUS" comment="Status from the Sweeper modules in WLBT. '1' in a field indicates Sweeper completion."/>
    <register addr="500000e4" rw_flags="RW" width="1" name="DRCG" comment="Dynamic Root Clock gating feature of SLSI blocks. Set to '1' to enable block clock gating. Otherwise the clocks will run all the time."/>
    <register addr="500000e8" rw_flags="RW" width="1" name="PIO_ALV" comment="These control the FEMCTRL output pins if PIO_ALV_EN is set to PIO_ALIVE_EN_PMU."/>
    <register addr="500000ec" rw_flags="RW" width="1" name="QREQ_OFF_OVR" comment="Q-channel request overrides. These are actually clock gate enables to bypass the Q-channel managers."/>
    <register addr="500000f0" rw_flags="RW" width="1" name="CLK_GATE_OVR" comment="Clock Gate overrides. Set to '1' to enable the clocks for each of the specified blocks."/>
    <register addr="500000f4" rw_flags="RW" width="2" name="CLK_GATE_OVR2" comment="Clock Gate overrides. Set to '1' to enable the clocks for each of the specified blocks."/>
    <register addr="500000f8" rw_flags="RW" width="1" name="PCH_REQ" comment="P-channel manager power down request. Set to '1' to request power down and '0' to power up. Handily inverted logic."/>
    <register addr="500000fc" rw_flags="R" width="1" name="PCH_ACK" comment="P-channel manager power down acknowledge. 1 = powered-down, 0 = powered-up."/>
    <register addr="50000100" rw_flags="RW" width="2" name="WLAN_MIF_LH_CTRL" comment="Portal WLAN MIF destination longhop control"/>
    <register addr="50000104" rw_flags="RW" width="1" name="CS_DEBUG" comment="Register-controllable CoreSight debug authentication bits."/>
    <register addr="50000108" rw_flags="RW" width="4" name="TCKR_OFFSET" comment="Set the offset to apply to the 32-bit ticker."/>
    <register addr="5000010c" rw_flags="R" width="4" name="PMU_TCKR_VALUE" comment="The current value of the 32-bit ticker."/>
    <register addr="50000110" rw_flags="RW" width="1" name="PMU_SEMAPHORE" comment="Shared semaphore."/>
    <register addr="50000114" rw_flags="R" width="1" name="CFG_AP_MAILBOX_FROM_AP" comment="AP-accessible mailbox register. Read-only from PMU."/>
    <register addr="50000118" rw_flags="RW" width="1" name="CFG_AP_MAILBOX_TO_AP" comment="AP-accessible mailbox register. Read-only from AP."/>
    <register addr="5000011c" rw_flags="R" width="4" name="PMU_REGS_FAILED_ADDRESS" comment="Address of a failed register access."/>
    <register addr="50000120" rw_flags="RW" width="1" name="PMU_REGS_STATUS" comment="Observe the AHB bus failure status. Write to a field to clear it."/>
    <register addr="50000124" rw_flags="RW" width="1" name="PMU_CLK_REQ_EXTEND_CYCLES" comment="The number of clock cycles to extend the request for the various clock gates after the activity is complete."/>
    <register addr="50000128" rw_flags="R" width="4" name="SYS_VERSION" comment="Connected to CHIP_VERSION_ID from the sysctrl register block."/>
    <register addr="5000012c" rw_flags="R" width="2" name="SYS_PERT_REGISTER_HASH" comment="Contains a 32bit hash of all the PERT register tree source used in the PMU"/>
    <register addr="50000130" rw_flags="RW" width="1" name="SYS_CTRL" comment="VDD_ALIVE-powered system config register"/>
    <register addr="50000134" rw_flags="RW" width="1" name="ZIPPY_CFG[0]" comment="ZIPPY control register for each ZIPPY_BB_TOP instance. Indexes match ZIPPY_BB_INSTANCES."/>
    <register addr="50000138" rw_flags="RW" width="1" name="ZIPPY_CFG[1]" comment="ZIPPY control register for each ZIPPY_BB_TOP instance. Indexes match ZIPPY_BB_INSTANCES."/>
    <register addr="5000013c" rw_flags="RW" width="1" name="ZIPPY_WPAN_LH_CFG" comment="WPAN ZIPPY LHASB control register."/>
    <register addr="50000140" rw_flags="RW" width="2" name="ZIPPY_WPAN_BB2RF_QCH_CTRL" comment="Control bits for the BT Distributer longhop (zippy_top side) PCH and QCH managers."/>
    <register addr="50000144" rw_flags="R" width="4" name="ZIPPY_WPAN_BB2RF_QCH_STATUS" comment="BT Distributer longhop (zippy_top side) Q-channel manager status."/>
    <register addr="50000148" rw_flags="RW" width="1" name="ZIPPY_WPAN_BB2RF_PCH_CTRL" comment="Control bits for the BT Distributer longhop (ZippyTop side) PCH and QCH managers."/>
    <register addr="5000014c" rw_flags="R" width="4" name="ZIPPY_WPAN_BB2RF_PCH_STATUS" comment="BT Distributer longhop (zippy_top side) P-channel manager status."/>
    <register addr="50000150" rw_flags="R" width="1" name="ZIPPY_WPAN_BB2RF_LH_STATUS" comment="Current status of useful longhop bus bits."/>
    <register addr="50000154" rw_flags="RW" width="2" name="ZIPPY_WPAN_RF2BB_QCH_CTRL" comment="Control bits for the BT Combiner longhop (zippy_top side) PCH and QCH managers."/>
    <register addr="50000158" rw_flags="R" width="4" name="ZIPPY_WPAN_RF2BB_QCH_STATUS" comment="BT Combiner longhop (zippy_top side) Q-channel manager status."/>
    <register addr="5000015c" rw_flags="RW" width="1" name="ZIPPY_WPAN_RF2BB_PCH_CTRL" comment="Control bits for the BT Combiner longhop (ZippyTop side) PCH and QCH managers."/>
    <register addr="50000160" rw_flags="R" width="4" name="ZIPPY_WPAN_RF2BB_PCH_STATUS" comment="BT Combiner longhop (zippy_top side) P-channel manager status."/>
    <register addr="50000164" rw_flags="R" width="1" name="ZIPPY_WPAN_RF2BB_LH_STATUS" comment="Current status of useful longhop bus bits."/>
    <register addr="50000168" rw_flags="RW" width="1" name="ZIPPY_WLAN_LH_CFG[0]" comment="WLAN LHASB configuration."/>
    <register addr="5000016c" rw_flags="RW" width="2" name="ZIPPY_WLAN_BB2RF_QCH_CTRL[0]" comment="Control bits for the BT Distributer longhop (zippy_top side) PCH and QCH managers."/>
    <register addr="50000170" rw_flags="R" width="4" name="ZIPPY_WLAN_BB2RF_QCH_STATUS[0]" comment="WLP Distributer longhop (zippy_top side) Q-channel manager status."/>
    <register addr="50000174" rw_flags="RW" width="1" name="ZIPPY_WLAN_BB2RF_PCH_CTRL[0]" comment="Control bits for the WLP Distributer longhop (ZippyTop side) PCH and QCH managers."/>
    <register addr="50000178" rw_flags="R" width="4" name="ZIPPY_WLAN_BB2RF_PCH_STATUS[0]" comment="WLP Distributer longhop (zippy_top side) P-channel manager status."/>
    <register addr="5000017c" rw_flags="R" width="1" name="ZIPPY_WLAN_BB2RF_LH_STATUS[0]" comment="Current status of useful longhop bus bits."/>
    <register addr="50000180" rw_flags="RW" width="2" name="ZIPPY_WLAN_RF2BB_QCH_CTRL[0]" comment="Control bits for the WLAN Primary Combiner longhop (zippy_top side) PCH and QCH managers."/>
    <register addr="50000184" rw_flags="R" width="4" name="ZIPPY_WLAN_RF2BB_QCH_STATUS[0]" comment="WLAN Primary Combiner longhop (zippy_top side) Q-channel manager status."/>
    <register addr="50000188" rw_flags="RW" width="1" name="ZIPPY_WLAN_RF2BB_PCH_CTRL[0]" comment="Control bits for the WLAN Primary Combiner longhop (ZippyTop side) PCH and QCH managers."/>
    <register addr="5000018c" rw_flags="R" width="4" name="ZIPPY_WLAN_RF2BB_PCH_STATUS[0]" comment="WLAN Primary Combiner longhop (zippy_top side) P-channel manager status."/>
    <register addr="50000190" rw_flags="R" width="1" name="ZIPPY_WLAN_RF2BB_LH_STATUS[0]" comment="Current status of useful longhop bus bits."/>
    <register addr="50000194" rw_flags="RW" width="2" name="ZIPPY_WLAN_EVENTS_QCH_CTRL[0]" comment="Control bits for the WLP Events longhop (zippy_top side) PCH and QCH managers."/>
    <register addr="50000198" rw_flags="R" width="4" name="ZIPPY_WLAN_EVENTS_QCH_STATUS[0]" comment="WLP Events longhop (zippy_top side) Q-channel manager status."/>
    <register addr="5000019c" rw_flags="RW" width="1" name="ZIPPY_WLAN_EVENTS_PCH_CTRL[0]" comment="Control bits for the WLP Events longhop (ZippyTop side) PCH and QCH managers."/>
    <register addr="500001a0" rw_flags="R" width="4" name="ZIPPY_WLAN_EVENTS_PCH_STATUS[0]" comment="WLP Events longhop (zippy_top side) P-channel manager status."/>
    <register addr="500001a4" rw_flags="R" width="1" name="ZIPPY_WLAN_EVENTS_LH_STATUS[0]" comment="Current status of useful longhop bus bits."/>
    <register addr="500001a8" rw_flags="RW" width="1" name="ZIPPY_MUX_CH20_CFG[0]" comment="Select which flags (if any) are muxed onto channels[2:0] of this ZIPPY instance (indexes match ZIPPY_BB_INSTANCES). Channels[2:0] are only used by WPAN, of which there's only one instance. Besides from NONE, no two registers should be set to the WPAN value. "/>
    <register addr="500001ac" rw_flags="RW" width="1" name="ZIPPY_MUX_CH20_CFG[1]" comment="Select which flags (if any) are muxed onto channels[2:0] of this ZIPPY instance (indexes match ZIPPY_BB_INSTANCES). Channels[2:0] are only used by WPAN, of which there's only one instance. Besides from NONE, no two registers should be set to the WPAN value. "/>
    <register addr="500001b0" rw_flags="RW" width="1" name="ZIPPY_MUX_CH53_WL0_CFG[0]" comment="Select which flags (if any) are muxed onto channels[5:3] of this ZIPPY instance (indexes match ZIPPY_BB_INSTANCES). These channels are used by WLAN, which is the more complicated case as there's multiple PHY instances, and in some cases (PRI/SEC)) they can have multiple PORTs of flags. Besides from the value NONE, no two registers between ZIPPY_MUX_CH53_WL0_CFG and ZIPPY_MUX_CH53_WL1_CFG should be set to the same value."/>
    <register addr="500001b4" rw_flags="RW" width="1" name="ZIPPY_MUX_CH53_WL0_CFG[1]" comment="Select which flags (if any) are muxed onto channels[5:3] of this ZIPPY instance (indexes match ZIPPY_BB_INSTANCES). These channels are used by WLAN, which is the more complicated case as there's multiple PHY instances, and in some cases (PRI/SEC)) they can have multiple PORTs of flags. Besides from the value NONE, no two registers between ZIPPY_MUX_CH53_WL0_CFG and ZIPPY_MUX_CH53_WL1_CFG should be set to the same value."/>
    <register addr="500001b8" rw_flags="RW" width="1" name="ZIPPY_MUX_CH53_WL1_CFG[0]" comment="Select which flags (if any) are muxed onto channels[5:3] of this ZIPPY instance (indexes match ZIPPY_BB_INSTANCES). These channels are used by WLAN, which is the more complicated case as there's multiple PHY instances, and in some cases (PRI/SEC)) they can have multiple PORTs of flags. Besides from the value NONE, no two registers between ZIPPY_MUX_CH53_WL0_CFG and ZIPPY_MUX_CH53_WL1_CFG should be set to the same value."/>
    <register addr="500001bc" rw_flags="RW" width="1" name="ZIPPY_MUX_CH53_WL1_CFG[1]" comment="Select which flags (if any) are muxed onto channels[5:3] of this ZIPPY instance (indexes match ZIPPY_BB_INSTANCES). These channels are used by WLAN, which is the more complicated case as there's multiple PHY instances, and in some cases (PRI/SEC)) they can have multiple PORTs of flags. Besides from the value NONE, no two registers between ZIPPY_MUX_CH53_WL0_CFG and ZIPPY_MUX_CH53_WL1_CFG should be set to the same value."/>
    <register addr="500001c0" rw_flags="RW" width="2" name="FREQ_COUNT_CTRL" comment="Control the frequency counter."/>
    <register addr="500001c4" rw_flags="R" width="4" name="FREQ_COUNT_STATUS" comment="Check the status and results of frequency counter."/>
    <register addr="500001c8" rw_flags="RW" width="1" name="SYS_SEMAPHORES[0]" comment="An array of single-bit semaphores available to any accessor that can see the PERT tree."/>
    <register addr="500001cc" rw_flags="RW" width="1" name="SYS_SEMAPHORES[1]" comment="An array of single-bit semaphores available to any accessor that can see the PERT tree."/>
    <register addr="500001d0" rw_flags="RW" width="1" name="SYS_SEMAPHORES[2]" comment="An array of single-bit semaphores available to any accessor that can see the PERT tree."/>
    <register addr="500001d4" rw_flags="RW" width="1" name="SYS_SEMAPHORES[3]" comment="An array of single-bit semaphores available to any accessor that can see the PERT tree."/>
    <register addr="500001d8" rw_flags="RW" width="1" name="SYS_SEMAPHORES[4]" comment="An array of single-bit semaphores available to any accessor that can see the PERT tree."/>
    <register addr="500001dc" rw_flags="RW" width="1" name="SYS_SEMAPHORES[5]" comment="An array of single-bit semaphores available to any accessor that can see the PERT tree."/>
    <register addr="500001e0" rw_flags="RW" width="1" name="SYS_SEMAPHORES[6]" comment="An array of single-bit semaphores available to any accessor that can see the PERT tree."/>
    <register addr="500001e4" rw_flags="RW" width="1" name="SYS_SEMAPHORES[7]" comment="An array of single-bit semaphores available to any accessor that can see the PERT tree."/>
    <register addr="500001e8" rw_flags="RW" width="4" name="WLAN_PD_RMP_BOOT_ADDR2" comment="Second WLAN_PD remapper region 0 address. Selectable using PMU bit PROC_CONFIG_WLAN_BOOT_ADDR_REG_SEL."/>
    <register addr="500001ec" rw_flags="RW" width="4" name="WPAN_PD_RMP_BOOT_ADDR2" comment="Second WPAN_PD remapper region 0 address. Selectable using PMU bit PROC_CONFIG_WLAN_BOOT_ADDR_REG_SEL."/>
    <register addr="500001f0" rw_flags="RW" width="1" name="MIF_QCH_CTRL" comment="Control bits for the MIF longhop PCH and QCH managers."/>
    <register addr="500001f4" rw_flags="R" width="4" name="MIF_QCH_STATUS" comment="MIF Q-channel manager status."/>
    <register addr="500001f8" rw_flags="RW" width="1" name="MIF_PCH_CTRL" comment="Control bits for the MIF longhop PCH and QCH managers."/>
    <register addr="500001fc" rw_flags="R" width="2" name="MIF_PCH_STATUS" comment="MIF P-channel manager status."/>
    <register addr="50000200" rw_flags="RW" width="1" name="PMU_NMI" comment="Cause non-maskable interrupts to occur on other CPUs."/>
    <register addr="50000204" rw_flags="RW" width="4" name="PMU_HW_CLK_SWITCH" comment="Control the hardware clock switcher."/>
    <register addr="50000208" rw_flags="R" width="1" name="PMU_HW_CLK_SWITCH_STATUS" comment="Status of the hardware clock switcher."/>
    <register addr="5000020c" rw_flags="RW" width="2" name="PMU_TCXO_FREQ" comment="Set the TCXO frequency in MHz for the Ticker. Defaults to 52MHz."/>
    <register addr="50000210" rw_flags="RW" width="1" name="PMU_QEXP_MIF" comment="MIF Q-channel manager clock cycle tick count once activity stops."/>
    <register addr="50000214" rw_flags="RW" width="1" name="PMU_PORTAL_NIC_CTRL" comment="Control some Portal NIC-400 Q-channel manager ports."/>
  </block>
  <block name="zippy_bb_0" comment="ZIPPY BB control and status registers">
    <register addr="53000000" rw_flags="RW" width="4" name="ZIPPY_BB_TIMEOUTS_I0" comment="Time out control for register read data and write acknowledges (if enabled) to be returned from the RF IC"/>
    <register addr="53000004" rw_flags="RW" width="4" name="ZIPPY_BB_TRANSPORT_I0" comment="ZIPPY baseband transport configuration. The matching configuration must also be set up in the RF chip"/>
    <register addr="53000008" rw_flags="RW" width="1" name="ZIPPY_BB_PRIORITY_INC_RATE_I0" comment="Configure the rate at which priority increases for unserviced channels. "/>
    <register addr="5300000c" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS0_CFG_I0" comment="Type 0 (BT) flag frame configuration"/>
    <register addr="53000010" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS1_CFG_I0" comment="Type 1 (BT) flag frame configuration"/>
    <register addr="53000014" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS2_CFG_I0" comment="Type 2 (BT) flag frame configuration"/>
    <register addr="53000018" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS3_CFG_I0" comment="Type 3 (WLAN) flag frame configuration"/>
    <register addr="5300001c" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS4_CFG_I0" comment="Type 4 (WLAN) flag frame configuration"/>
    <register addr="53000020" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS5_CFG_I0" comment="Type 5 (WLAN) flag frame configuration"/>
    <register addr="53000024" rw_flags="RW" width="4" name="ZIPPY_BB_DATA_CFG_I0" comment="Address/data frame configuration and write ack mask"/>
    <register addr="53000028" rw_flags="RW" width="1" name="ZIPPY_BB_INT_CMD_PORT_DISABLE_I0" comment="Disanable CMD Interrupt Port."/>
    <register addr="5300002c" rw_flags="RW" width="1" name="ZIPPY_BB_INT_READ_VALID_PORT_DISABLE_I0" comment="Disanable READ VALID Interrupt Port."/>
    <register addr="53000030" rw_flags="RW" width="1" name="ZIPPY_BB_INT_RFIC_PORT_DISABLE_I0" comment="Disanable RFIC Interrupt Port."/>
    <register addr="53000034" rw_flags="RW" width="1" name="ZIPPY_BB_INT_ERROR_PORT_DISABLE_I0" comment="Disanable ERROR Interrupt Port."/>
    <register addr="53000038" rw_flags="RW" width="4" name="ZIPPY_BB_INT_EN_I0" comment="Interrupt sources enable."/>
    <register addr="5300003c" rw_flags="R" width="4" name="ZIPPY_BB_INT_STATUS_I0" comment="Status of Interrupt sources."/>
    <register addr="53000040" rw_flags="W" width="4" name="ZIPPY_BB_INT_CLEAR_I0" comment="Clear Interrupt Sources by writing a 1 to the register bit."/>
    <register addr="53000044" rw_flags="R" width="2" name="ZIPPY_BB_APB_STATUS_I0" comment="Status of ZIppy register access"/>
    <register addr="53000048" rw_flags="R" width="2" name="ZIPPY_BB_DATA_COUNTS_I0" comment="Local BB counters for data from BB to RF and RF to BB. TO be compared with equivalent ones in the RFIC"/>
    <register addr="5300004c" rw_flags="RW" width="1" name="ZIPPY_BB_DEBUG_CTRL_I0" comment="Control of Zippy debug and logging facilities"/>
    <register addr="53000050" rw_flags="RW" width="1" name="ZIPPY_MUTEX_I0" comment="Single resource mutual exclusion lock. "/>
    <register addr="53000054" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_TIMER_I0[0]" comment=" Sets the window count down timer (in clock ticks)."/>
    <register addr="53000058" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_PRE_RESV_I0[0]" comment=" Sets the window Start of the Pre-Reservation window."/>
    <register addr="5300005c" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_RESV_I0[0]" comment=" Sets the window Start of the Reservation window."/>
    <register addr="53000060" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_TIMER_I0[1]" comment=" Sets the window count down timer (in clock ticks)."/>
    <register addr="53000064" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_PRE_RESV_I0[1]" comment=" Sets the window Start of the Pre-Reservation window."/>
    <register addr="53000068" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_RESV_I0[1]" comment=" Sets the window Start of the Reservation window."/>
    <register addr="5300006c" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_TIMER_I0[2]" comment=" Sets the window count down timer (in clock ticks)."/>
    <register addr="53000070" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_PRE_RESV_I0[2]" comment=" Sets the window Start of the Pre-Reservation window."/>
    <register addr="53000074" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_RESV_I0[2]" comment=" Sets the window Start of the Reservation window."/>
    <register addr="53000078" rw_flags="RW" width="1" name="ZIPPY_BB_DATA_CFG2_I0" comment=" General Configuration"/>
    <register addr="5300007c" rw_flags="RW" width="2" name="ZIPPY_BB_TIMEOUTS2_I0" comment="Extra Time out controls."/>
    <register addr="53000080" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[0]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="53000084" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[1]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="53000088" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[2]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="5300008c" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[3]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="53000090" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[4]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="53000094" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[5]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="53000098" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[6]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="5300009c" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[7]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="530000a0" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[8]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="530000a4" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[9]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="530000a8" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[10]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="530000ac" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[11]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="530000b0" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[12]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="530000b4" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[13]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="530000b8" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[14]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="530000bc" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I0[15]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="530000c0" rw_flags="R" width="4" name="ZIPPY_BB_SELFTEST_DATA_I0" comment="Used only for Selftest. Requires an external Zippy loop back. 32bit writes will return to back this register."/>
    <register addr="530000c4" rw_flags="RW" width="1" name="ZIPPY_BB_BACK2BACK_I0" comment="Back to back frame control for sample edge switching."/>
    <register addr="530000c8" rw_flags="R" width="1" name="ZIPPY_BB_LRATE_MARGIN_I0" comment="A read of this register in Slow mode will return the uncertainty margin to the rising and falling edge."/>
    <register addr="530000cc" rw_flags="RW" width="1" name="ZIPPY_BB_LRATE_CONFIG_I0" comment="Configuration for Line Rate Sampler."/>
  </block>
  <block name="zippy_bb_1" comment="ZIPPY BB control and status registers">
    <register addr="53100000" rw_flags="RW" width="4" name="ZIPPY_BB_TIMEOUTS_I1" comment="Time out control for register read data and write acknowledges (if enabled) to be returned from the RF IC"/>
    <register addr="53100004" rw_flags="RW" width="4" name="ZIPPY_BB_TRANSPORT_I1" comment="ZIPPY baseband transport configuration. The matching configuration must also be set up in the RF chip"/>
    <register addr="53100008" rw_flags="RW" width="1" name="ZIPPY_BB_PRIORITY_INC_RATE_I1" comment="Configure the rate at which priority increases for unserviced channels. "/>
    <register addr="5310000c" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS0_CFG_I1" comment="Type 0 (BT) flag frame configuration"/>
    <register addr="53100010" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS1_CFG_I1" comment="Type 1 (BT) flag frame configuration"/>
    <register addr="53100014" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS2_CFG_I1" comment="Type 2 (BT) flag frame configuration"/>
    <register addr="53100018" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS3_CFG_I1" comment="Type 3 (WLAN) flag frame configuration"/>
    <register addr="5310001c" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS4_CFG_I1" comment="Type 4 (WLAN) flag frame configuration"/>
    <register addr="53100020" rw_flags="RW" width="2" name="ZIPPY_BB_FLAGS5_CFG_I1" comment="Type 5 (WLAN) flag frame configuration"/>
    <register addr="53100024" rw_flags="RW" width="4" name="ZIPPY_BB_DATA_CFG_I1" comment="Address/data frame configuration and write ack mask"/>
    <register addr="53100028" rw_flags="RW" width="1" name="ZIPPY_BB_INT_CMD_PORT_DISABLE_I1" comment="Disanable CMD Interrupt Port."/>
    <register addr="5310002c" rw_flags="RW" width="1" name="ZIPPY_BB_INT_READ_VALID_PORT_DISABLE_I1" comment="Disanable READ VALID Interrupt Port."/>
    <register addr="53100030" rw_flags="RW" width="1" name="ZIPPY_BB_INT_RFIC_PORT_DISABLE_I1" comment="Disanable RFIC Interrupt Port."/>
    <register addr="53100034" rw_flags="RW" width="1" name="ZIPPY_BB_INT_ERROR_PORT_DISABLE_I1" comment="Disanable ERROR Interrupt Port."/>
    <register addr="53100038" rw_flags="RW" width="4" name="ZIPPY_BB_INT_EN_I1" comment="Interrupt sources enable."/>
    <register addr="5310003c" rw_flags="R" width="4" name="ZIPPY_BB_INT_STATUS_I1" comment="Status of Interrupt sources."/>
    <register addr="53100040" rw_flags="W" width="4" name="ZIPPY_BB_INT_CLEAR_I1" comment="Clear Interrupt Sources by writing a 1 to the register bit."/>
    <register addr="53100044" rw_flags="R" width="2" name="ZIPPY_BB_APB_STATUS_I1" comment="Status of ZIppy register access"/>
    <register addr="53100048" rw_flags="R" width="2" name="ZIPPY_BB_DATA_COUNTS_I1" comment="Local BB counters for data from BB to RF and RF to BB. TO be compared with equivalent ones in the RFIC"/>
    <register addr="5310004c" rw_flags="RW" width="1" name="ZIPPY_BB_DEBUG_CTRL_I1" comment="Control of Zippy debug and logging facilities"/>
    <register addr="53100050" rw_flags="RW" width="1" name="ZIPPY_MUTEX_I1" comment="Single resource mutual exclusion lock. "/>
    <register addr="53100054" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_TIMER_I1[0]" comment=" Sets the window count down timer (in clock ticks)."/>
    <register addr="53100058" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_PRE_RESV_I1[0]" comment=" Sets the window Start of the Pre-Reservation window."/>
    <register addr="5310005c" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_RESV_I1[0]" comment=" Sets the window Start of the Reservation window."/>
    <register addr="53100060" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_TIMER_I1[1]" comment=" Sets the window count down timer (in clock ticks)."/>
    <register addr="53100064" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_PRE_RESV_I1[1]" comment=" Sets the window Start of the Pre-Reservation window."/>
    <register addr="53100068" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_RESV_I1[1]" comment=" Sets the window Start of the Reservation window."/>
    <register addr="5310006c" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_TIMER_I1[2]" comment=" Sets the window count down timer (in clock ticks)."/>
    <register addr="53100070" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_PRE_RESV_I1[2]" comment=" Sets the window Start of the Pre-Reservation window."/>
    <register addr="53100074" rw_flags="RW" width="4" name="ZIPPY_BB_WINDOW_RESV_I1[2]" comment=" Sets the window Start of the Reservation window."/>
    <register addr="53100078" rw_flags="RW" width="1" name="ZIPPY_BB_DATA_CFG2_I1" comment=" General Configuration"/>
    <register addr="5310007c" rw_flags="RW" width="2" name="ZIPPY_BB_TIMEOUTS2_I1" comment="Extra Time out controls."/>
    <register addr="53100080" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[0]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="53100084" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[1]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="53100088" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[2]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="5310008c" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[3]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="53100090" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[4]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="53100094" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[5]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="53100098" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[6]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="5310009c" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[7]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="531000a0" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[8]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="531000a4" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[9]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="531000a8" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[10]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="531000ac" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[11]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="531000b0" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[12]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="531000b4" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[13]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="531000b8" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[14]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="531000bc" rw_flags="RW" width="1" name="ZIPPY_BB_RFIC_ADD_BOUNDS_I1[15]" comment="Max size of each of RFIC PSEL blocks (for address compression) 0=0, 1=8, 2=16, 3=32, 4=64, 5=128, 6=256, 7=512. Total must be less than 2048"/>
    <register addr="531000c0" rw_flags="R" width="4" name="ZIPPY_BB_SELFTEST_DATA_I1" comment="Used only for Selftest. Requires an external Zippy loop back. 32bit writes will return to back this register."/>
    <register addr="531000c4" rw_flags="RW" width="1" name="ZIPPY_BB_BACK2BACK_I1" comment="Back to back frame control for sample edge switching."/>
    <register addr="531000c8" rw_flags="R" width="1" name="ZIPPY_BB_LRATE_MARGIN_I1" comment="A read of this register in Slow mode will return the uncertainty margin to the rising and falling edge."/>
    <register addr="531000cc" rw_flags="RW" width="1" name="ZIPPY_BB_LRATE_CONFIG_I1" comment="Configuration for Line Rate Sampler."/>
  </block>
  <block name="zippy_bb_mport_0" comment="ZIPPY BB master ports">
    <register addr="53010000" rw_flags="RW" width="4" name="ZIPPY_BB_ADDR_CTRL_MPORT_I0" comment="ZIPPY (MULTIPORT)Remote register access address and controls. The bottom 16 bits of this register (PSEL and ADDR) are actually the bottom 16 bits of the byte address of the RFIC register to be accessed (from HTML docs for example)"/>
    <register addr="53010004" rw_flags="RW" width="4" name="ZIPPY_BB_WRITE_DATA_MPORT_I0" comment="ZIPPY (MULTIPORT) Data to write to remote register over ZIPPY. Only the number of bytes specified in the ZIPPY_BB_WIDTH field are transferred. Unwritten bytes are unchanged, if the destination register is larger than the number of bytes written"/>
    <register addr="53010008" rw_flags="RW" width="4" name="ZIPPY_BB_WRITE_DATA_MASK_MPORT_I0" comment="ZIPPY (MULTIPORT) Any bits cleared in this register will not be written at the destination register. Action is performed by doing a automatic Read-Modify-Write operation. There is no Read-interrupt on completion however the READ data (in the Read-Modify-Write cycle) is saved in the ZIPPY_BB_READ_DATA_ register."/>
    <register addr="5301000c" rw_flags="R" width="4" name="ZIPPY_BB_READ_DATA_MPORT_I0" comment="ZIPPY (MULTIPORT) Data returned from the remote register over ZIPPY. Only the number of bytes specified in the ZIPPY_BB_WIDTH field are transferred"/>
    <register addr="53010010" rw_flags="RW" width="1" name="ZIPPY_BB_INT_MPORT_DISABLE_I0" comment="ZIPPY (MultiPORT) Interrupt controller."/>
    <register addr="53010014" rw_flags="RW" width="1" name="ZIPPY_BB_INT_MPORT_ENABLE_I0" comment="ZIPPY (MultiPORT) Interrupt controller."/>
    <register addr="53010018" rw_flags="RWS" width="1" name="ZIPPY_BB_INT_MPORT_CLEAR_I0" comment="ZIPPY (MultiPORT) Interrupt controller."/>
    <register addr="5301001c" rw_flags="R" width="1" name="ZIPPY_BB_INT_MPORT_RAW_I0" comment="ZIPPY (MultiPORT) Interrupt controller."/>
  </block>
  <block name="zippy_bb_mport_1" comment="ZIPPY BB master ports">
    <register addr="53110000" rw_flags="RW" width="4" name="ZIPPY_BB_ADDR_CTRL_MPORT_I1" comment="ZIPPY (MULTIPORT)Remote register access address and controls. The bottom 16 bits of this register (PSEL and ADDR) are actually the bottom 16 bits of the byte address of the RFIC register to be accessed (from HTML docs for example)"/>
    <register addr="53110004" rw_flags="RW" width="4" name="ZIPPY_BB_WRITE_DATA_MPORT_I1" comment="ZIPPY (MULTIPORT) Data to write to remote register over ZIPPY. Only the number of bytes specified in the ZIPPY_BB_WIDTH field are transferred. Unwritten bytes are unchanged, if the destination register is larger than the number of bytes written"/>
    <register addr="53110008" rw_flags="RW" width="4" name="ZIPPY_BB_WRITE_DATA_MASK_MPORT_I1" comment="ZIPPY (MULTIPORT) Any bits cleared in this register will not be written at the destination register. Action is performed by doing a automatic Read-Modify-Write operation. There is no Read-interrupt on completion however the READ data (in the Read-Modify-Write cycle) is saved in the ZIPPY_BB_READ_DATA_ register."/>
    <register addr="5311000c" rw_flags="R" width="4" name="ZIPPY_BB_READ_DATA_MPORT_I1" comment="ZIPPY (MULTIPORT) Data returned from the remote register over ZIPPY. Only the number of bytes specified in the ZIPPY_BB_WIDTH field are transferred"/>
    <register addr="53110010" rw_flags="RW" width="1" name="ZIPPY_BB_INT_MPORT_DISABLE_I1" comment="ZIPPY (MultiPORT) Interrupt controller."/>
    <register addr="53110014" rw_flags="RW" width="1" name="ZIPPY_BB_INT_MPORT_ENABLE_I1" comment="ZIPPY (MultiPORT) Interrupt controller."/>
    <register addr="53110018" rw_flags="RWS" width="1" name="ZIPPY_BB_INT_MPORT_CLEAR_I1" comment="ZIPPY (MultiPORT) Interrupt controller."/>
    <register addr="5311001c" rw_flags="R" width="1" name="ZIPPY_BB_INT_MPORT_RAW_I1" comment="ZIPPY (MultiPORT) Interrupt controller."/>
  </block>
</subsystem>
