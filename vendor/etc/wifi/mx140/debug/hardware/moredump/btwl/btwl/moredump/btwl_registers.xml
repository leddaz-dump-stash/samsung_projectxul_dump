<?xml version="1.0" encoding="utf-8"?>

<!--
(c) SCSC 2015-2016 autogenerated by moredump.py as part of 'drun prep'.
  Changes made to this file may cause incorrect behaviour and will be lost if it is regenerated.

  XML file defining registers for btwl subsystem moredump
  Chip hash: 611a


-->

<subsystem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.samsung.com ../Registers.xsd"
  name="btwl">
  <block name="bt_rf" comment="Bluetooth modem registers">
    <register addr="00002000" rw_flags="R" width="1" name="BT_ANA_STATUS" comment="Miscellaneous readable analogue bits"/>
    <register addr="00002004" rw_flags="RW" width="2" name="BT_ANA_RXADC_TEST[0]" comment="Test enables for lab testing."/>
    <register addr="00002008" rw_flags="RW" width="4" name="BT_ANA_RXADC" comment=""/>
    <register addr="0000200c" rw_flags="RW" width="4" name="BT_ANA_RXADC_1" comment=""/>
    <register addr="00002010" rw_flags="R" width="1" name="BT_ANA_RXADC_STATUS" comment=""/>
    <register addr="00002014" rw_flags="RW" width="4" name="BT_ANA_RXABB" comment=""/>
    <register addr="00002018" rw_flags="RW" width="4" name="BT_ANA_RXRF" comment=""/>
    <register addr="0000201c" rw_flags="RW" width="4" name="BT_ANA_RXRF_1" comment=""/>
    <register addr="00002020" rw_flags="RW" width="1" name="BT_ANA_MISC" comment=""/>
    <register addr="00002024" rw_flags="RW" width="4" name="BT_ANA_TXBB_0" comment=""/>
    <register addr="00002028" rw_flags="RW" width="2" name="BT_ANA_TXRF_0" comment=""/>
    <register addr="0000202c" rw_flags="RW" width="2" name="BT_ANA_DPD_CONFIG" comment=""/>
    <register addr="00002030" rw_flags="RW" width="4" name="BT_ANA_PERIPH" comment=""/>
    <register addr="00002034" rw_flags="R" width="4" name="BT_ANA_LO_DPLL_TEST_STATUS" comment="This register contains test outputs from the LO"/>
    <register addr="00002038" rw_flags="R" width="2" name="BT_ANA_LO_DPLL_PM_STATUS" comment="This register contains PM outputs from the LO"/>
    <register addr="0000203c" rw_flags="RW" width="4" name="BT_ANA_LO_CLKREF_ADC" comment="TDC control register"/>
    <register addr="00002040" rw_flags="RW" width="4" name="BT_ANA_LO_DCO_OPEN1" comment="DCO control register for open-loop test"/>
    <register addr="00002044" rw_flags="RW" width="4" name="BT_ANA_LO_DCO_OPEN2" comment="Coarse-tune control code for open-loop test"/>
    <register addr="00002048" rw_flags="RW" width="4" name="BT_ANA_LO_DCO_TEST" comment="DCO control register for test"/>
    <register addr="0000204c" rw_flags="RW" width="4" name="BT_ANA_LO_LO_TEST" comment="LO control register for test"/>
    <register addr="00002050" rw_flags="RW" width="4" name="BT_ANA_LO_PU_DCO_CONF1" comment="DCO TOP block power control register"/>
    <register addr="00002054" rw_flags="RW" width="4" name="BT_ANA_LO_PU_DCO_CONF2" comment="DCO BUF power control register"/>
    <register addr="00002058" rw_flags="RW" width="4" name="BT_ANA_LO_PU_TDC_CONF" comment="TDC block control register"/>
    <register addr="0000205c" rw_flags="RW" width="4" name="BT_ANA_LO_REG_CONF" comment="LDO and BUF control register"/>
    <register addr="00002060" rw_flags="RW" width="4" name="BT_ANA_LO_TOP" comment="PLL power control register"/>
    <register addr="00002064" rw_flags="RW" width="1" name="BT_ANA_LO_MISC" comment="This register is one of the LO configuration registers"/>
    <register addr="00002068" rw_flags="RW" width="2" name="BT_ANA_DIV" comment="This register is one of the WLAN LO configuration registers"/>
    <register addr="0000206c" rw_flags="RW" width="4" name="BT_ANA_LO_DCO_CONF1" comment="This register is one of the LO configuration registers"/>
    <register addr="00002070" rw_flags="RW" width="4" name="BT_ANA_LO_DCO_CONF2" comment="This register is one of the LO configuration registers"/>
    <register addr="00002074" rw_flags="RW" width="4" name="BT_ANA_LO_PLL_RESV" comment="This register is one of the LO configuration registers"/>
    <register addr="00002078" rw_flags="RW" width="4" name="BT_ANA_LO_DPLL_CONF1" comment="This register is one of the LO configuration registers"/>
    <register addr="0000207c" rw_flags="RW" width="4" name="BT_ANA_LO_DPLL_CONF2[0]" comment="This register is one of the LO configuration registers, index 0 of the reg is default, index 1 is used in polar mode. "/>
    <register addr="00002080" rw_flags="RW" width="4" name="BT_ANA_LO_DPLL_CONF2[1]" comment="This register is one of the LO configuration registers, index 0 of the reg is default, index 1 is used in polar mode. "/>
    <register addr="00002084" rw_flags="RW" width="4" name="BT_ANA_LO_DPLL_CONF3" comment=""/>
    <register addr="00002088" rw_flags="RW" width="4" name="BT_ANA_LO_DPLL_TEST" comment="This register is one of the LO configuration registers"/>
    <register addr="0000208c" rw_flags="RW" width="4" name="BT_ANA_LO_D_FREQ1" comment="This register is one of the LO configuration registers"/>
    <register addr="00002090" rw_flags="RW" width="4" name="BT_ANA_LO_D_FREQ2" comment="This register is one of the LO configuration registers"/>
    <register addr="00002094" rw_flags="RW" width="2" name="BT_ANA_LO_PM_CONF[0]" comment="9-bits register, index 0 of the reg is default for, index 1 is used for 2M mode. "/>
    <register addr="00002098" rw_flags="RW" width="2" name="BT_ANA_LO_PM_CONF[1]" comment="9-bits register, index 0 of the reg is default for, index 1 is used for 2M mode. "/>
    <register addr="0000209c" rw_flags="RW" width="4" name="BT_ANA_LO_TDC_NLMEM" comment="This register is one of the LO configuration registers"/>
    <register addr="000020a0" rw_flags="RW" width="2" name="BT_ANA_TEST_ONLY" comment=""/>
    <register addr="000020a4" rw_flags="RW" width="4" name="BT_ANA_IQCAL_BUF" comment="New in Beta plus model"/>
    <register addr="000020a8" rw_flags="RW" width="1" name="BT_ANA_LO_CLK_TDCNLMEM" comment="CLK for TDC NLMEM"/>
    <register addr="000020ac" rw_flags="RW" width="4" name="BT_ANA_RX_COEX[0]" comment=""/>
    <register addr="000020b0" rw_flags="RW" width="4" name="BT_ANA_TX_COEX_0[0]" comment=""/>
    <register addr="000020b4" rw_flags="RW" width="4" name="BT_ANA_TX_COEX_1[0]" comment=""/>
    <register addr="000020b8" rw_flags="RW" width="2" name="BT_ANA_TX_COEX_2[0]" comment=""/>
    <register addr="000020bc" rw_flags="RW" width="2" name="BT_ANA_LO_ORIDES" comment="This register is LO orides"/>
    <register addr="000020c0" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[0]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020c4" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[1]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020c8" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[2]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020cc" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[3]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020d0" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[4]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020d4" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[5]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020d8" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[6]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020dc" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[7]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020e0" rw_flags="RW" width="2" name="BT_ANA_LNA_LUT2[0]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020e4" rw_flags="RW" width="2" name="BT_ANA_LNA_LUT2[1]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020e8" rw_flags="RW" width="2" name="BT_ANA_LNA_LUT2[2]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020ec" rw_flags="RW" width="2" name="BT_ANA_LNA_LUT2[3]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020f0" rw_flags="RW" width="2" name="BT_ANA_LNA_LUT2[4]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020f4" rw_flags="RW" width="2" name="BT_ANA_LNA_LUT2[5]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020f8" rw_flags="RW" width="2" name="BT_ANA_LNA_LUT2[6]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000020fc" rw_flags="RW" width="2" name="BT_ANA_LNA_LUT2[7]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="00002100" rw_flags="RW" width="1" name="BT_ANA_DEBUG_SEL" comment=""/>
    <register addr="00002104" rw_flags="RW" width="1" name="BT_ANA_LO_SW_START" comment="Write 1 to start the LO"/>
    <register addr="00002108" rw_flags="RW" width="1" name="BT_ANA_LO_SW_STOP" comment="Write 1 to stop the LO"/>
    <register addr="0000210c" rw_flags="R" width="1" name="BT_ANA_LO_CTRL_STATE" comment="The state of the RFIC_DGT_LO_CTRL block, which controls the DPLL start/stop."/>
    <register addr="00002110" rw_flags="RW" width="4" name="BT_ANA_SW_L_ENABLES" comment="Override value for timer outputs when not controlled by timer - lower half"/>
    <register addr="00002114" rw_flags="RW" width="4" name="BT_ANA_SW_L_ENABLES_MASK" comment="Selects whether timer outputs or override bits are used for analogue - lower half"/>
    <register addr="00002118" rw_flags="R" width="4" name="BT_ANA_L_ENABLES_STATUS" comment="Shows values being driven to analogue interface after timer and masking function is resolved - lower half"/>
    <register addr="0000211c" rw_flags="RW" width="4" name="BT_ANA_SW_H_ENABLES" comment="Override value for timer outputs when not controlled by timer - upper half"/>
    <register addr="00002120" rw_flags="RW" width="4" name="BT_ANA_SW_H_ENABLES_MASK" comment="Selects whether timer outputs or override bits are used for analogue - upper half"/>
    <register addr="00002124" rw_flags="R" width="4" name="BT_ANA_H_ENABLES_STATUS" comment="Shows values being driven to analogue interface after timer and masking function is resolved - upper half"/>
    <register addr="00002128" rw_flags="RW" width="1" name="BT_FREQ_CONF_TIME_EN" comment="Suspends applying of BT_ANA_LO_D_FREQ1, BT_ANA_LO_D_FREQ2 and BT_DCRS_NOM_IFB_T_CFG values until System and Fine time are equal to configured values in BT_FREQ_CONF_TIME register. When values of the registers are applied, the read value of this register is cleared by HW to zero "/>
    <register addr="0000212c" rw_flags="RW" width="4" name="BT_FREQ_CONF_TIME" comment="Configuration values for BT_FREQ_CONF_TIME_EN "/>
    <register addr="00002130" rw_flags="RW" width="1" name="BT_RF_DEBUG_SEL[0]" comment=""/>
    <register addr="00002134" rw_flags="RW" width="1" name="BT_RF_ZIPPY_CONFIG" comment=""/>
    <register addr="00002138" rw_flags="RW" width="1" name="BT_RF_INTEREST_DISABLE" comment="This register stores Hardware events that should NEVER happen. Powers on already enabled. - Disable interrupt/read enable status"/>
    <register addr="0000213c" rw_flags="RW" width="1" name="BT_RF_INTEREST_ENABLE" comment="This register stores Hardware events that should NEVER happen. Powers on already enabled. - Enable interrupt/read enable status"/>
    <register addr="00002140" rw_flags="RWS" width="1" name="BT_RF_INTEREST_CLEAR" comment="This register stores Hardware events that should NEVER happen. Powers on already enabled. - Clear interrupt/read pending interrupt status"/>
    <register addr="00002144" rw_flags="R" width="1" name="BT_RF_INTEREST_RAW" comment="This register stores Hardware events that should NEVER happen. Powers on already enabled. - Read incoming interrupt status"/>
    <register addr="00002148" rw_flags="RW" width="1" name="BT_TX_MIMO_CFG" comment="TX MIMO Config - leave at defaults on SISO chip"/>
    <register addr="0000214c" rw_flags="RW" width="1" name="BT_TX_DEBUG_SEL[0]" comment="Bluetooth Transmit debug mux select"/>
    <register addr="00002150" rw_flags="RW" width="4" name="BT_TX_MOD_TEST" comment=""/>
    <register addr="00002154" rw_flags="RW" width="1" name="BT_TX_PATTERN_GEN_CFG" comment=""/>
    <register addr="00002158" rw_flags="RW" width="4" name="BT_TX_CTRL_CFG" comment="Bluetooth Transmit Control configuration."/>
    <register addr="0000215c" rw_flags="R" width="1" name="BT_TX_CTRL_STATUS" comment="The current Bluetooth Tx radio mode"/>
    <register addr="00002160" rw_flags="RW" width="4" name="BT_TX_CTRL_HADM_TONE" comment="HADM Tone configuration"/>
    <register addr="00002164" rw_flags="RW" width="4" name="BT_TX_CONFIG" comment=""/>
    <register addr="00002168" rw_flags="RW" width="4" name="BT_TX_BB_RAMP_CONFIG" comment=""/>
    <register addr="0000216c" rw_flags="RW" width="4" name="BT_TX_SCALE_CONFIG" comment=""/>
    <register addr="00002170" rw_flags="RW" width="4" name="BT_TX_MR_CONFIG" comment=""/>
    <register addr="00002174" rw_flags="RW" width="4" name="BT_TX_MR_MOD_DELAYS" comment=""/>
    <register addr="00002178" rw_flags="RW" width="2" name="BT_POLAR_CTRL[0]" comment="General control register"/>
    <register addr="0000217c" rw_flags="RW" width="4" name="BT_POLAR_DATA[0]" comment=""/>
    <register addr="00002180" rw_flags="RW" width="1" name="BT_POLAR_MUX_COMMON" comment="Mux control register, common between both MIMO paths"/>
    <register addr="00002184" rw_flags="RW" width="2" name="BT_POLAR_MUX[0]" comment="Mux control register -arrayed for MIMO"/>
    <register addr="00002188" rw_flags="RW" width="4" name="BT_POLAR_QUAD_POLAR_DATA[0]" comment=""/>
    <register addr="0000218c" rw_flags="RW" width="2" name="BT_POLAR_AA_FIR_CONTROL[0]" comment="FIR filter control for AntiAliasing"/>
    <register addr="00002190" rw_flags="RW" width="4" name="BT_POLAR_AA_FIR_TAPS[0]" comment="Upper AntiAliasing FIR filter taps"/>
    <register addr="00002194" rw_flags="R" width="2" name="BT_POLAR_DEBUG_STATUS" comment="Connected to sig gen Tone."/>
    <register addr="00002198" rw_flags="RW" width="4" name="BT_POLAR_QUAD_POLAR_CONSTS" comment=""/>
    <register addr="0000219c" rw_flags="RW" width="2" name="BT_POLAR_COMPENSATION_DATA_WRITE[0]" comment="Compensation Y LUT write register"/>
    <register addr="000021a0" rw_flags="R" width="2" name="BT_POLAR_COMPENSATION_DATA_READ[0]" comment="Compensation Y LUT read register"/>
    <register addr="000021a4" rw_flags="RW" width="2" name="BT_POLAR_COMPENSATION_ADDR[0]" comment="Compensation Y LUT address register"/>
    <register addr="000021a8" rw_flags="RW" width="2" name="BT_POLAR_COMPENSATION_MIMO_PHASE_ADJ[0]" comment="Mimo Phase adjustment within the amam/ampm compensation block"/>
    <register addr="000021ac" rw_flags="RW" width="4" name="BT_POLAR_TEST_STIM" comment="Polar Test stimulus"/>
    <register addr="000021b0" rw_flags="RW" width="4" name="BT_POLAR_IIR_COEFF1_LSW" comment="TX POLAR IIR filter coefficients (Biquad 1)"/>
    <register addr="000021b4" rw_flags="RW" width="4" name="BT_POLAR_IIR_COEFF2_LSW" comment="TX POLAR IIR filter coefficients (Biquad 2)"/>
    <register addr="000021b8" rw_flags="RW" width="2" name="BT_POLAR_IIR_COEFF_MSB" comment="TX POLAR IIR filter coefficients MSB (Biquad 1 and 2)"/>
    <register addr="000021bc" rw_flags="RW" width="2" name="BT_POLAR_IIR_FILTER_CFG" comment="TX POLAR IIR filter configuration"/>
    <register addr="000021c0" rw_flags="RW" width="4" name="BT_POLAR_POLAR_QUAD_CORR[0]" comment=""/>
    <register addr="000021c4" rw_flags="RW" width="4" name="BT_POLAR_POLAR_QUAD_OFFSET[0]" comment="I and Q offset adjustments for Polar to IQ conversion"/>
    <register addr="000021c8" rw_flags="RW" width="4" name="BT_POLAR_POLAR_QUAD_CONSTS[0]" comment=""/>
    <register addr="000021cc" rw_flags="RW" width="4" name="BT_POLAR_SIGGEN_CTRL" comment="Cal Siggen sine wave Ctrl"/>
    <register addr="000021d0" rw_flags="RW" width="1" name="BT_POLAR_INVERT_CTRL[0]" comment="Fallback IQ Inversion control"/>
    <register addr="000021d4" rw_flags="RW" width="1" name="BT_TX_FREQ_RESAMPLE_EN" comment="Bluetooth Transmit Freq resampling enables"/>
    <register addr="000021d8" rw_flags="RW" width="4" name="BT_TX_FREQ_RESAMPLE_CTRL[0]" comment="Bluetooth Transmit Freq resampling control, default index 0 is 1M, index 1 is for settings muxed for 2M. "/>
    <register addr="000021dc" rw_flags="RW" width="4" name="BT_TX_FREQ_RESAMPLE_CTRL[1]" comment="Bluetooth Transmit Freq resampling control, default index 0 is 1M, index 1 is for settings muxed for 2M. "/>
    <register addr="000021e0" rw_flags="RW" width="4" name="BT_TX_FREQ_RESAMPLE_TINC" comment="Bluetooth Transmit resampling Tinc (now for the Polar AND IQ resampling)  16.16 format (xx.xxxxxxx) signed so 00.1000000 = 0.5, 00.0100000 = 0.25, reset default gives 16/76.8  https://planetcalc.com/862/ 0x4EC4F for 52M"/>
    <register addr="000021e4" rw_flags="RW" width="4" name="BT_TX_LO_RESAMPLE_TINC" comment="Bluetooth Transmit resampling Tinc to CDC to external LO clock that is not a division of the BT clock (i.e when running off PLL rather than TCXO)  16.16 format (xx.xxxxxxx) signed so 00.1000000 = 0.5, 00.0100000 = 0.25, reset default gives 26/80  https://planetcalc.com/862/ "/>
    <register addr="000021e8" rw_flags="RW" width="1" name="BT_TX_ANTENNA_ID" comment="Control the default antenna ID selected for BT Tx"/>
    <register addr="000021ec" rw_flags="RW" width="4" name="BT_TX_SUPP_CTRL" comment="Control BT Tx supplemental antenna switching"/>
    <register addr="000021f0" rw_flags="RW" width="4" name="BT_TX_SUPP_CTRL2" comment="Control BT Tx supplemental antenna switching overrides"/>
    <register addr="000021f4" rw_flags="RW" width="4" name="BT_TX_SUPP_ANTENNA_SEQ[0]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 16 Antenna ID in a sequence are supported."/>
    <register addr="000021f8" rw_flags="RW" width="4" name="BT_TX_SUPP_ANTENNA_SEQ[1]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 16 Antenna ID in a sequence are supported."/>
    <register addr="000021fc" rw_flags="RW" width="2" name="BT_TX_SUPP_CTRL_OVRD" comment="BT Tx supplemental overrides"/>
    <register addr="00002200" rw_flags="RW" width="4" name="ZGB_TX_CONFIG2" comment="Configuration of Frequency output value the ZigBee Tx Modulator"/>
    <register addr="00002204" rw_flags="RW" width="4" name="TX_COMP_CONFIG" comment="Configuration of TX companion extention"/>
    <register addr="00002208" rw_flags="RW" width="2" name="TX_COMP_CONFIG2" comment="Configuration2 of TX companion extention"/>
    <register addr="0000220c" rw_flags="RW" width="1" name="BT_TX_TIMER_CFG" comment="Bluetooth Transmit Radio Timer configuration."/>
    <register addr="00002210" rw_flags="R" width="1" name="BT_TX_TIMER_STATUS" comment="Bluetooth Transmit Radio Timer status."/>
    <register addr="00002214" rw_flags="W" width="1" name="BT_TX_TIMER_SW_TRIGGERS" comment="Bluetooth Transmit Radio Timer software triggers - write sensitive."/>
    <register addr="00002218" rw_flags="RW" width="4" name="BT_TX_TIMER_EVENT_TIME" comment="Set the required Tx event time. Used when timing to an event, not used when timing from an event."/>
    <register addr="0000221c" rw_flags="RW" width="1" name="BT_TX_TIMER_DIG_SW_ORIDE" comment="Bluetooth Transmit Radio Timer digital enable software overrides."/>
    <register addr="00002220" rw_flags="RW" width="4" name="BT_TX_TIMER_TRIGGERS" comment="Bluetooth Tx Radio Timer - trigger configuration."/>
    <register addr="00002224" rw_flags="RW" width="2" name="BT_TX_TIMER_TRIGGERS2" comment="Bluetooth Tx Radio Timer - trigger configuration2."/>
    <register addr="00002228" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT0_ANA_EN[0]" comment="Transmit slot  0 Analogue Enables 64 bit"/>
    <register addr="0000222c" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT0_ANA_EN[1]" comment="Transmit slot  0 Analogue Enables 64 bit"/>
    <register addr="00002230" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT1_ANA_EN[0]" comment="Transmit slot  1 Analogue Enables"/>
    <register addr="00002234" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT1_ANA_EN[1]" comment="Transmit slot  1 Analogue Enables"/>
    <register addr="00002238" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT2_ANA_EN[0]" comment="Transmit slot  2 Analogue Enables"/>
    <register addr="0000223c" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT2_ANA_EN[1]" comment="Transmit slot  2 Analogue Enables"/>
    <register addr="00002240" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT3_ANA_EN[0]" comment="Transmit slot  3 Analogue Enables"/>
    <register addr="00002244" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT3_ANA_EN[1]" comment="Transmit slot  3 Analogue Enables"/>
    <register addr="00002248" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT4_ANA_EN[0]" comment="Transmit slot  4 Analogue Enables"/>
    <register addr="0000224c" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT4_ANA_EN[1]" comment="Transmit slot  4 Analogue Enables"/>
    <register addr="00002250" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT5_ANA_EN[0]" comment="Transmit slot  5 Analogue Enables"/>
    <register addr="00002254" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT5_ANA_EN[1]" comment="Transmit slot  5 Analogue Enables"/>
    <register addr="00002258" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT6_ANA_EN[0]" comment="Transmit slot  6 Analogue Enables"/>
    <register addr="0000225c" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT6_ANA_EN[1]" comment="Transmit slot  6 Analogue Enables"/>
    <register addr="00002260" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT7_ANA_EN[0]" comment="Transmit slot  7 Analogue Enables"/>
    <register addr="00002264" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT7_ANA_EN[1]" comment="Transmit slot  7 Analogue Enables"/>
    <register addr="00002268" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT8_ANA_EN[0]" comment="Transmit slot  8 Analogue Enables"/>
    <register addr="0000226c" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT8_ANA_EN[1]" comment="Transmit slot  8 Analogue Enables"/>
    <register addr="00002270" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT9_ANA_EN[0]" comment="Transmit slot  9 Analogue Enables"/>
    <register addr="00002274" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT9_ANA_EN[1]" comment="Transmit slot  9 Analogue Enables"/>
    <register addr="00002278" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT10_ANA_EN[0]" comment="Transmit slot  10 Analogue Enables"/>
    <register addr="0000227c" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT10_ANA_EN[1]" comment="Transmit slot  10 Analogue Enables"/>
    <register addr="00002280" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT11_ANA_EN[0]" comment="Transmit slot  11 Analogue Enables"/>
    <register addr="00002284" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT11_ANA_EN[1]" comment="Transmit slot  11 Analogue Enables"/>
    <register addr="00002288" rw_flags="RW" width="4" name="BT_TX_TIMER_DIG0_EN" comment=""/>
    <register addr="0000228c" rw_flags="RW" width="4" name="BT_TX_TIMER_DIG1_EN" comment=""/>
    <register addr="00002290" rw_flags="RW" width="4" name="BT_TX_TIMER_DELAY0" comment=""/>
    <register addr="00002294" rw_flags="RW" width="4" name="BT_TX_TIMER_DELAY1" comment=""/>
    <register addr="00002298" rw_flags="RW" width="4" name="BT_TX_TIMER_DELAY2" comment=""/>
    <register addr="0000229c" rw_flags="RW" width="1" name="BT_RF_RX_CFG" comment="Bluetooth Rx configuration."/>
    <register addr="000022a0" rw_flags="RW" width="4" name="BT_RX_SUPP_CFG" comment="Bluetooth Rx CTE configuration."/>
    <register addr="000022a4" rw_flags="RW" width="2" name="BT_RX_SUPP_CFG2" comment="Bluetooth Rx CTE configuration."/>
    <register addr="000022a8" rw_flags="R" width="1" name="BT_RX_SUPP_STATUS" comment="Bluetooth Rx CTE status information."/>
    <register addr="000022ac" rw_flags="RW" width="1" name="BT_RX_DEBUG_SEL[0]" comment="Bluetooth Rx debug mux select."/>
    <register addr="000022b0" rw_flags="RW" width="4" name="BT_RX_SUPP_ANTENNA_SEQ[0]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 16 Antenna ID in a sequence are supported."/>
    <register addr="000022b4" rw_flags="RW" width="4" name="BT_RX_SUPP_ANTENNA_SEQ[1]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 16 Antenna ID in a sequence are supported."/>
    <register addr="000022b8" rw_flags="RW" width="1" name="BT_RX_CTRL_DEBUG_SEL" comment="Bluetooth Rx Control debug mux select."/>
    <register addr="000022bc" rw_flags="R" width="4" name="BT_RX_BDR_SYNC_TIME" comment="The time we found BDR Sync (in relation to RFIC System Time) - uS"/>
    <register addr="000022c0" rw_flags="R" width="1" name="BT_RX_BDR_SYNC_FINE_TIME" comment="The fine time we found BDR Sync (in relation to RFIC System Time) - sub uS  (runs at 80Mhz) "/>
    <register addr="000022c4" rw_flags="RW" width="4" name="BT_RX_BDR_SYNC_TIMEOUT_OFFSET" comment="The number of microseconds before the BDR sync timeout is asserted from the point the Rx Digital enable is set (in reference to the RFIC system time)"/>
    <register addr="000022c8" rw_flags="RW" width="4" name="BT_RX_LR_SYNC_TIMEOUT_OFFSET" comment="The number of microseconds before the LR sync timeout is asserted from the point the Rx Digital enable is set (in reference to the RFIC system time)"/>
    <register addr="000022cc" rw_flags="RW" width="4" name="BT_RX_CTRL_CFG" comment="Bluetooth Rx Control configuration."/>
    <register addr="000022d0" rw_flags="RW" width="4" name="BT_RX_MLE_ESCO_OFFSET" comment="Set to enable EDR3 symbol alignment workaround logic for Java EVT0."/>
    <register addr="000022d4" rw_flags="RW" width="4" name="BT_RX_MLE_ACL_OFFSET" comment="Set to enable EDR3 symbol alignment workaround logic for Java EVT0."/>
    <register addr="000022d8" rw_flags="RW" width="4" name="BT_RX_MR_SYNC_TIMING" comment="BT DPSK synchronization timing configuration. Time unit un 16Mhz clock cycles"/>
    <register addr="000022dc" rw_flags="R" width="1" name="BT_RX_DUAL_SYNC" comment="If dual sync enabled this reg flags what packet we synced to (and continued to decode), cleared on start of RX"/>
    <register addr="000022e0" rw_flags="RW" width="4" name="BT_RX_MR_FREQ_CONFIG" comment="BT DPSK demodulator frequency offset in bits [12:0] - Bit 15 when *** cleared *** enables spectrum inversion (change sign of Q channel *** after *** SDDCRS mixer)"/>
    <register addr="000022e4" rw_flags="RW" width="4" name="BT_CAL_ANALYSER_CFG" comment="This register configures the signal analyser"/>
    <register addr="000022e8" rw_flags="R" width="4" name="BT_CAL_ANALYSER_RESULT" comment="This register contains the values generated by the signal analyser"/>
    <register addr="000022ec" rw_flags="RW" width="4" name="BT_SIG_ANALYSER_CFG" comment="This register configures the signal analyser"/>
    <register addr="000022f0" rw_flags="RW" width="2" name="BT_SIG_ANALYSER_FREQ[0]" comment="This signed value sets the frequencies of the tones used by the signal analyser. The value for a                                                                                                             given frequency can be found by multiplying by 65_536 and dividing by 16_000_000.                                                                                                             This sets the frequency of the tone used by the signal analyser.  Set any unused ones to 0"/>
    <register addr="000022f4" rw_flags="RW" width="2" name="BT_SIG_ANALYSER_FREQ[1]" comment="This signed value sets the frequencies of the tones used by the signal analyser. The value for a                                                                                                             given frequency can be found by multiplying by 65_536 and dividing by 16_000_000.                                                                                                             This sets the frequency of the tone used by the signal analyser.  Set any unused ones to 0"/>
    <register addr="000022f8" rw_flags="R" width="4" name="BT_SIG_ANALYSER_I_RESULT[0]" comment="This contains the signed I values generated by the signal analyser"/>
    <register addr="000022fc" rw_flags="R" width="4" name="BT_SIG_ANALYSER_I_RESULT[1]" comment="This contains the signed I values generated by the signal analyser"/>
    <register addr="00002300" rw_flags="R" width="4" name="BT_SIG_ANALYSER_Q_RESULT[0]" comment="This contains the signed Q values generated by the signal analyser"/>
    <register addr="00002304" rw_flags="R" width="4" name="BT_SIG_ANALYSER_Q_RESULT[1]" comment="This contains the signed Q values generated by the signal analyser"/>
    <register addr="00002308" rw_flags="R" width="1" name="BT_SIG_ANALYSER_STATUS" comment="Signal analyser status bits."/>
    <register addr="0000230c" rw_flags="RW" width="2" name="BT_SIG_TIMESTAMP_CFG" comment="This register configures the sig/cal analyser timestamp and scheduling block "/>
    <register addr="00002310" rw_flags="R" width="4" name="BT_SIG_TIMESTAMP_RESULT" comment="Signal or cal analyser uS timestamp bits."/>
    <register addr="00002314" rw_flags="R" width="1" name="BT_SIG_TIMESTAMP_FINE_RESULT" comment="Signal or cal analyser fine timestamp bits."/>
    <register addr="00002318" rw_flags="RW" width="1" name="BT_RX_DEMOD_DISCRIM_OFFSET[0]" comment="BT GFSK Discriminator offset- index 0 for BDR(path 0), 1 for BLE(path 1), 2 for BDR(path 1), 3 for BLE(path 1)"/>
    <register addr="0000231c" rw_flags="RW" width="1" name="BT_RX_DEMOD_DISCRIM_OFFSET[1]" comment="BT GFSK Discriminator offset- index 0 for BDR(path 0), 1 for BLE(path 1), 2 for BDR(path 1), 3 for BLE(path 1)"/>
    <register addr="00002320" rw_flags="RW" width="4" name="BT_RX_DEMOD_CONFIG[0]" comment="BT GFSK demodulator configuration - index 0 for BDR, 1 for BLE"/>
    <register addr="00002324" rw_flags="RW" width="4" name="BT_RX_DEMOD_CONFIG[1]" comment="BT GFSK demodulator configuration - index 0 for BDR, 1 for BLE"/>
    <register addr="00002328" rw_flags="RW" width="2" name="BT_BDR_FREQ_DISC_CONFIG" comment="Configures GFSK frequency discriminator"/>
    <register addr="0000232c" rw_flags="RW" width="4" name="BT_BDR_FREQEST_ARRAY_CONFIG[0]" comment="Configures the High Offset Frequency Estimator 0-BREDR, 1-BLE1M, 2-BLE2M, 3-BLELR"/>
    <register addr="00002330" rw_flags="RW" width="4" name="BT_BDR_FREQEST_ARRAY_CONFIG[1]" comment="Configures the High Offset Frequency Estimator 0-BREDR, 1-BLE1M, 2-BLE2M, 3-BLELR"/>
    <register addr="00002334" rw_flags="RW" width="4" name="BT_BDR_FREQEST_ARRAY_CONFIG[2]" comment="Configures the High Offset Frequency Estimator 0-BREDR, 1-BLE1M, 2-BLE2M, 3-BLELR"/>
    <register addr="00002338" rw_flags="RW" width="4" name="BT_BDR_FREQEST_ARRAY_CONFIG[3]" comment="Configures the High Offset Frequency Estimator 0-BREDR, 1-BLE1M, 2-BLE2M, 3-BLELR"/>
    <register addr="0000233c" rw_flags="RW" width="2" name="BT_BDR_FREQEST_ARRAY_CONFIG2[0]" comment="Configures the High Offset Frequecy Estimator 0-BREDR, 1-BLE1M, 2-BLE2M, 3-BLELR"/>
    <register addr="00002340" rw_flags="RW" width="2" name="BT_BDR_FREQEST_ARRAY_CONFIG2[1]" comment="Configures the High Offset Frequecy Estimator 0-BREDR, 1-BLE1M, 2-BLE2M, 3-BLELR"/>
    <register addr="00002344" rw_flags="RW" width="2" name="BT_BDR_FREQEST_ARRAY_CONFIG2[2]" comment="Configures the High Offset Frequecy Estimator 0-BREDR, 1-BLE1M, 2-BLE2M, 3-BLELR"/>
    <register addr="00002348" rw_flags="RW" width="2" name="BT_BDR_FREQEST_ARRAY_CONFIG2[3]" comment="Configures the High Offset Frequecy Estimator 0-BREDR, 1-BLE1M, 2-BLE2M, 3-BLELR"/>
    <register addr="0000234c" rw_flags="RW" width="1" name="BT_BDR_FREQEST_TREE_CONFIG[0]" comment="Configures the High Offset Frequecy Estimator using tree technique"/>
    <register addr="00002350" rw_flags="RW" width="1" name="BT_BDR_FREQEST_TREE_CONFIG[1]" comment="Configures the High Offset Frequecy Estimator using tree technique"/>
    <register addr="00002354" rw_flags="RW" width="1" name="BT_BDR_FREQEST_TREE_CONFIG[2]" comment="Configures the High Offset Frequecy Estimator using tree technique"/>
    <register addr="00002358" rw_flags="RW" width="1" name="BT_BDR_FREQEST_TREE_CONFIG[3]" comment="Configures the High Offset Frequecy Estimator using tree technique"/>
    <register addr="0000235c" rw_flags="RW" width="4" name="BT_RX_DEMOD_BDR_DECISION_EQ_CONFIG" comment="Configures the decision-directed BDR equaliser AND 'Squelch' functionality for frequency discriminator"/>
    <register addr="00002360" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_CONFIG" comment="Config for and enable for the new RX BDR enhancements provided by MLSE block"/>
    <register addr="00002364" rw_flags="RW" width="2" name="BT_RX_DEMOD_MLSE_CONFIG2" comment="Config MLSE block, 2 sets one for LR and one for all other modes"/>
    <register addr="00002368" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_CONFIG3" comment="Config for and enable for the new enhancements provided by MLSE block"/>
    <register addr="0000236c" rw_flags="RW" width="2" name="BT_RX_DEMOD_MLSE_CONFIG4" comment="Count Parameter LE Coded PHY for MLSE block"/>
    <register addr="00002370" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_LR_EXP_FREQ_CONFIG" comment="Config for MLSE expected FREQ, used for all BLE/BR - ignore LR in name"/>
    <register addr="00002374" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_SYNC_CONFIG" comment="MLSE config for the LR FFT sync block"/>
    <register addr="00002378" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_SYNC_POWER" comment="New setting for the LR FFT sync block, false sync optimisations"/>
    <register addr="0000237c" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_LR_SYNC_MIN_POWER" comment="Replace LR synchroniser ECO, create MIN_POWER reg "/>
    <register addr="00002380" rw_flags="RW" width="1" name="BT_RX_DEMOD_MLSE_DEBUG" comment="Debug Sel"/>
    <register addr="00002384" rw_flags="RW" width="2" name="BT_RX_SYNC_CONFIG" comment="Additional Synchroniser config"/>
    <register addr="00002388" rw_flags="RW" width="4" name="BT_RF_ACCESS_CODE_LAP" comment="Lower address part of BT address to generate access code"/>
    <register addr="0000238c" rw_flags="RW" width="4" name="BT_RX_WBREE_ACCESS_ADDR" comment="BLE Access Address. Sync word to search for in received packets, Bit 31 1st on air."/>
    <register addr="00002390" rw_flags="RW" width="4" name="BT_RX_BLR_ACCESS_ADDR" comment="BLR Access Address. Sync word to search for in received packets, Bit 31 1st on air.  Seperate LR access code to make dual sync useful."/>
    <register addr="00002394" rw_flags="RW" width="4" name="BT_RX_WBREE_ACCESS_ADDR_EXT" comment="Extended BLE (not BLR) Access Address.  2nd word on air, bit 0 last on air - experimental feature."/>
    <register addr="00002398" rw_flags="RW" width="2" name="BT_RX_ANT_NET_ADDR" comment="ANT Network Address for Rx Synchroniser"/>
    <register addr="0000239c" rw_flags="R" width="2" name="BT_RX_SYNC_NUM_ERRORS" comment="Number of bit errors in access code"/>
    <register addr="000023a0" rw_flags="R" width="4" name="BT_RX_FREQ_STATUS" comment="BT GFSK frequency discriminator output"/>
    <register addr="000023a4" rw_flags="R" width="4" name="BT_RX_LR_FREQ_OFFSET" comment="BT LR frequency offset outputs"/>
    <register addr="000023a8" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_CONFIG" comment="Config for and enable for the new RX EDR enhancements provided by MLE block"/>
    <register addr="000023ac" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_THCOM00" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="000023b0" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_THCOM04" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="000023b4" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_THCOM08" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="000023b8" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_THCOM12" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="000023bc" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_HBASE00" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="000023c0" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_HBASE04" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="000023c4" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_HBASE08" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="000023c8" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_HBASE12" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="000023cc" rw_flags="RW" width="4" name="BT_RX_MR_SYNC_CONFIG" comment="BT DPSK demodulator synchronization configuration"/>
    <register addr="000023d0" rw_flags="RW" width="4" name="BT_RX_MR_SYNC_EDR2_CONFIG" comment="BT DPSK demodulator synchronization configuration2"/>
    <register addr="000023d4" rw_flags="RW" width="4" name="BT_RX_MR_SYNC_EDR3_CONFIG" comment="BT DPSK demodulator synchronization configuration2"/>
    <register addr="000023d8" rw_flags="RW" width="4" name="BT_RX_MR_SAMP_CONFIG" comment="BT DPSK demodulator slicer configuration"/>
    <register addr="000023dc" rw_flags="RW" width="4" name="BT_RX_MR_EQ_TAPS_LSW" comment="BT DPSK RRC-filter coefficients LSW"/>
    <register addr="000023e0" rw_flags="RW" width="4" name="BT_RX_MR_EQ_TAPS_PSW" comment="BT DPSK RRC-filter coefficients Between LSW-PSW-MSW"/>
    <register addr="000023e4" rw_flags="RW" width="4" name="BT_RX_MR_EQ_TAPS_MSW" comment="BT DPSK RRC-filter coefficients MSW"/>
    <register addr="000023e8" rw_flags="R" width="2" name="BT_RX_MR_FREQ" comment=""/>
    <register addr="000023ec" rw_flags="RW" width="1" name="BT_RX_MIMO_CFG" comment="Dummy RX MIMO Config"/>
    <register addr="000023f0" rw_flags="R" width="1" name="BT_DCRS_ADC_MON_STATUS[0]" comment="ADC power detect output register: Note: BT_DCRS_ADC_MON_SINGLE_SHOT_EN should be set if this register is being used for scanning purposes."/>
    <register addr="000023f4" rw_flags="RW" width="1" name="BT_DCRS_ADC_MON_CS_ENABLE[0]" comment="Conditional scan enable (turns on just sincfir and adcproc)"/>
    <register addr="000023f8" rw_flags="RW" width="2" name="BT_DCRS_CIC_CFG[0]" comment="BT CIC decimator configuration"/>
    <register addr="000023fc" rw_flags="W" width="1" name="BT_DCRS_ADC_MON_ENABLE[0]" comment="Rising edge on this signal resets ADC RMS accumulator"/>
    <register addr="00002400" rw_flags="RW" width="2" name="BT_DCRS_ADC_MON_CONFIG[0][0]" comment="Optional ADC domain processing configuration, index 0 is default, 1 is BLE version"/>
    <register addr="00002404" rw_flags="RW" width="2" name="BT_DCRS_ADC_MON_CONFIG[0][1]" comment="Optional ADC domain processing configuration, index 0 is default, 1 is BLE version"/>
    <register addr="00002408" rw_flags="RW" width="1" name="BT_DCRS_ADC_MON_CONFIG2[0]" comment="Optional ADC domain processing configuration 2"/>
    <register addr="0000240c" rw_flags="RW" width="4" name="BT_DCRS_AGC_CFG[0]" comment="BT AGC configuration"/>
    <register addr="00002410" rw_flags="RW" width="4" name="BT_DCRS_AGC_CFG1[0]" comment="AGC configuration register 1"/>
    <register addr="00002414" rw_flags="RW" width="4" name="BT_DCRS_AGC_CFG2[0][0]" comment="AGC configuration register 3 (index 1 is for BLE2, index 0 is everything else)"/>
    <register addr="00002418" rw_flags="RW" width="4" name="BT_DCRS_AGC_CFG2[0][1]" comment="AGC configuration register 3 (index 1 is for BLE2, index 0 is everything else)"/>
    <register addr="0000241c" rw_flags="RW" width="2" name="BT_DCRS_AGC_LNA_RSSI_CFG[0]" comment="LNA RSSI thresholding logic configuration"/>
    <register addr="00002420" rw_flags="RW" width="2" name="BT_DCRS_AGC_MIX_RSSI_CFG[0]" comment="MIX RSSI thresholding logic configuration"/>
    <register addr="00002424" rw_flags="RW" width="2" name="BT_DCRS_AGC_ABB_RSSI_CFG[0]" comment="ABB RSSI thresholding logic configuration"/>
    <register addr="00002428" rw_flags="RW" width="2" name="BT_DCRS_AGC_ADC_ANA_RSSI_CFG[0]" comment="ADC_ANA RSSI thresholding logic configuration"/>
    <register addr="0000242c" rw_flags="RW" width="2" name="BT_DCRS_ADC_DIG_RSSI_CFG[0]" comment="ADC RSSI configuration (0=I, 1=Q)."/>
    <register addr="00002430" rw_flags="RW" width="2" name="BT_DCRS_AGC_SW_CTRL[0]" comment="SW override enables"/>
    <register addr="00002434" rw_flags="R" width="1" name="BT_DCRS_AGC_STATUS_COMMON[0]" comment="AGC status."/>
    <register addr="00002438" rw_flags="R" width="4" name="BT_DCRS_AGC_STATUS_SAT[0]" comment="AGC status."/>
    <register addr="0000243c" rw_flags="R" width="4" name="BT_DCRS_AGC_STATUS_GAIN[0]" comment="AGC status."/>
    <register addr="00002440" rw_flags="R" width="2" name="BT_DCRS_AGC_STATUS_GAIN_LOG[0]" comment="AGC gain at BT_DCRS_AGC_GAIN_LOG_TIME."/>
    <register addr="00002444" rw_flags="RW" width="1" name="BT_DCRS_AGC_EN_SRC[0]" comment="Configures AGC enable criteria"/>
    <register addr="00002448" rw_flags="RW" width="4" name="BT_DCRS_AGC_GAIN_STEPS[0]" comment="AGC step values for each saturation indicator"/>
    <register addr="0000244c" rw_flags="RW" width="2" name="BT_DCRS_AGC_SATRST[0]" comment="Configurable AGC Saturation Indicator resets"/>
    <register addr="00002450" rw_flags="RW" width="2" name="BT_DCRS_AGC_EQ_PWR_THR[0]" comment="(Post digital gain) power threshold register for digital gain control"/>
    <register addr="00002454" rw_flags="RW" width="4" name="BT_DCRS_AGC_BB_PWR_THR[0][0]" comment="(Pre and  post digital gain) power threshold register for analog gain control, index 0 is default, 1 is BLE 2M version"/>
    <register addr="00002458" rw_flags="RW" width="4" name="BT_DCRS_AGC_BB_PWR_THR[0][1]" comment="(Pre and  post digital gain) power threshold register for analog gain control, index 0 is default, 1 is BLE 2M version"/>
    <register addr="0000245c" rw_flags="RW" width="1" name="BT_DCRS_AGC_FAST_DIG_CTRL_CFG[0]" comment="(Pre digital gain) power threshold register for fast digital control of the analogue gains"/>
    <register addr="00002460" rw_flags="W" width="1" name="BT_DCRS_AGC_RESET[0]" comment="Reset AGC state and set gains to startup values in BT_DCRS_AGC_CFG  "/>
    <register addr="00002464" rw_flags="RW" width="4" name="BT_DCRS_AGC_GAIN_LOG_TIME[0]" comment="Time at which AGC gains is stored in BT_DCRS_AGC_STATUS_GAIN_LOG  "/>
    <register addr="00002468" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG0[0][0]" comment="BT baseband equalizer filter coefficients, index 0 is default, 1 is BLE version"/>
    <register addr="0000246c" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG0[0][1]" comment="BT baseband equalizer filter coefficients, index 0 is default, 1 is BLE version"/>
    <register addr="00002470" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG1[0][0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="00002474" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG1[0][1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="00002478" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG2[0][0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="0000247c" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG2[0][1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="00002480" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG3[0][0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="00002484" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG3[0][1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="00002488" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG4[0][0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="0000248c" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG4[0][1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="00002490" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG5[0][0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="00002494" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG5[0][1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="00002498" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG6[0][0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="0000249c" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG6[0][1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000024a0" rw_flags="RW" width="2" name="BT_DCRS_BB_EQ_CFG7[0][0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000024a4" rw_flags="RW" width="2" name="BT_DCRS_BB_EQ_CFG7[0][1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000024a8" rw_flags="RW" width="1" name="BT_DCRS_EQ_CONFIG[0]" comment="BT baseband equalizer configuration"/>
    <register addr="000024ac" rw_flags="RW" width="2" name="BT_DCRS_DBG_CFG[0]" comment="BT debug mux configuration"/>
    <register addr="000024b0" rw_flags="RW" width="2" name="BT_DCRS_IF_EQ_CFG[0]" comment="BT IF equalizer filter coefficients"/>
    <register addr="000024b4" rw_flags="RW" width="1" name="BT_DCRS_IIR_CONFIG[0][0]" comment="IIR decimation configuration, index 0 is default, 1 is BLE version"/>
    <register addr="000024b8" rw_flags="RW" width="1" name="BT_DCRS_IIR_CONFIG[0][1]" comment="IIR decimation configuration, index 0 is default, 1 is BLE version"/>
    <register addr="000024bc" rw_flags="RW" width="4" name="BT_DCRS_TINC_CFG[0]" comment="BT resampling ratio configuration - Must be calculated as ( 1 - 16*(BT_DCRS_CIC_DEC+1)/Adc_MHz)/4 0.1538.  Value 0x04EC4EC for 52M TCXO"/>
    <register addr="000024c0" rw_flags="RW" width="4" name="BT_DCRS_TINC_BLE2_CFG[0]" comment="BT resampling ratio configuration - Must be calculated as ( 1 - 32*(BT_DCRS_CIC_DEC+1)/Adc_MHz)/4 0.3845. Value 0x189D89C for 52M TCXO"/>
    <register addr="000024c4" rw_flags="RW" width="1" name="BT_DCRS_LINT_CFG[0]" comment="BT linear interpolator configuration"/>
    <register addr="000024c8" rw_flags="RW" width="4" name="BT_DCRS_PHASECOMP_SHIFTS_FE0[0]" comment=""/>
    <register addr="000024cc" rw_flags="RW" width="4" name="BT_DCRS_PHASECOMP_SHIFTS_FE1[0]" comment=""/>
    <register addr="000024d0" rw_flags="RW" width="4" name="BT_DCRS_PHASECOMP_SHIFTS_MIX0[0]" comment=""/>
    <register addr="000024d4" rw_flags="RW" width="2" name="BT_DCRS_PHASECOMP_SHIFTS_ADC[0]" comment=""/>
    <register addr="000024d8" rw_flags="RW" width="4" name="BT_DCRS_PHASECOMP_DELAYS[0]" comment="Phase compensator delay values"/>
    <register addr="000024dc" rw_flags="R" width="4" name="BT_DCRS_BB_PWR_STATUS[0]" comment="Measured baseband power (pre-digital gain)"/>
    <register addr="000024e0" rw_flags="R" width="4" name="BT_DCRS_POST_PWR_STATUS[0]" comment="Measured baseband power (post-digital gain)"/>
    <register addr="000024e4" rw_flags="RW" width="2" name="BT_DCRS_AGC_PWR_MEAS[0]" comment="AGC power measure configuration"/>
    <register addr="000024e8" rw_flags="RW" width="1" name="BT_DCRS_ADC_EN_DELAY[0]" comment="Configures latency of ADC domain startup relative to 16M"/>
    <register addr="000024ec" rw_flags="R" width="2" name="BT_DCRS_FREQ_OFFSET_STATUS[0]" comment=""/>
    <register addr="000024f0" rw_flags="RW" width="2" name="BT_DCRS_NOM_IF_BT_CFG" comment="BT nominal IF"/>
    <register addr="000024f4" rw_flags="RW" width="4" name="ZGB_RX_CCA_CARRIER_SENSE_CFG" comment="Carrier Sense for detecting ZigBee signal"/>
    <register addr="000024f8" rw_flags="RW" width="4" name="ZGB_RX_INIT_ACQ_CFG" comment="Configuration for Initial Acquisition"/>
    <register addr="000024fc" rw_flags="RW" width="4" name="ZGB_RX_INIT_ACQ2_CFG" comment="Configuration2 for Initial Acquisition"/>
    <register addr="00002500" rw_flags="RW" width="4" name="ZGB_RX_DISC_CFG" comment="Rx Zigbee Discriminator configuration."/>
    <register addr="00002504" rw_flags="R" width="2" name="ZGB_RX_DISC_CFG2" comment="Rx Zigbee Discriminator configuration2."/>
    <register addr="00002508" rw_flags="RW" width="4" name="ZGB_RX_CFG" comment="General and LR Configuration."/>
    <register addr="0000250c" rw_flags="RW" width="1" name="BT_RX_TIMER_CFG" comment="Bluetooth Rx Radio Timer configuration."/>
    <register addr="00002510" rw_flags="R" width="1" name="BT_RX_TIMER_STATUS" comment="Bluetooth Rx Radio Timer status."/>
    <register addr="00002514" rw_flags="W" width="1" name="BT_RX_TIMER_SW_TRIGGERS" comment="Bluetooth Rx Radio Timer software triggers - write sensitive."/>
    <register addr="00002518" rw_flags="RW" width="4" name="BT_RX_TIMER_EVENT_TIME" comment="Set the required Tx event time. Used when timing to an event, not used when timing from an event."/>
    <register addr="0000251c" rw_flags="RW" width="1" name="BT_RX_TIMER_DIG_SW_ORIDE" comment="Override timer digital outputs, when masked."/>
    <register addr="00002520" rw_flags="RW" width="4" name="BT_RX_TIMER_TRIGGERS" comment="Bluetooth Rx Radio Timer - trigger configuration."/>
    <register addr="00002524" rw_flags="RW" width="4" name="BT_RX_TIMER_TRIGGERS2" comment="Bluetooth Rx Radio Timer - trigger configuration2."/>
    <register addr="00002528" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT0_ANA_EN[0]" comment="Receive slot  0 Analogue Enables - 64bit"/>
    <register addr="0000252c" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT0_ANA_EN[1]" comment="Receive slot  0 Analogue Enables - 64bit"/>
    <register addr="00002530" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT1_ANA_EN[0]" comment="Receive slot  1 Analogue Enables"/>
    <register addr="00002534" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT1_ANA_EN[1]" comment="Receive slot  1 Analogue Enables"/>
    <register addr="00002538" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT2_ANA_EN[0]" comment="Receive slot  2 Analogue Enables"/>
    <register addr="0000253c" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT2_ANA_EN[1]" comment="Receive slot  2 Analogue Enables"/>
    <register addr="00002540" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT3_ANA_EN[0]" comment="Receive slot  3 Analogue Enables"/>
    <register addr="00002544" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT3_ANA_EN[1]" comment="Receive slot  3 Analogue Enables"/>
    <register addr="00002548" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT4_ANA_EN[0]" comment="Receive slot  4 Analogue Enables"/>
    <register addr="0000254c" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT4_ANA_EN[1]" comment="Receive slot  4 Analogue Enables"/>
    <register addr="00002550" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT5_ANA_EN[0]" comment="Receive slot  5 Analogue Enables"/>
    <register addr="00002554" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT5_ANA_EN[1]" comment="Receive slot  5 Analogue Enables"/>
    <register addr="00002558" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT6_ANA_EN[0]" comment="Receive slot  6 Analogue Enables"/>
    <register addr="0000255c" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT6_ANA_EN[1]" comment="Receive slot  6 Analogue Enables"/>
    <register addr="00002560" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT7_ANA_EN[0]" comment="Receive slot  7 Analogue Enables"/>
    <register addr="00002564" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT7_ANA_EN[1]" comment="Receive slot  7 Analogue Enables"/>
    <register addr="00002568" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT8_ANA_EN[0]" comment="Receive slot  8 Analogue Enables"/>
    <register addr="0000256c" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT8_ANA_EN[1]" comment="Receive slot  8 Analogue Enables"/>
    <register addr="00002570" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT9_ANA_EN[0]" comment="Receive slot  9 Analogue Enables"/>
    <register addr="00002574" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT9_ANA_EN[1]" comment="Receive slot  9 Analogue Enables"/>
    <register addr="00002578" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT10_ANA_EN[0]" comment="Receive slot  10 Analogue Enables"/>
    <register addr="0000257c" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT10_ANA_EN[1]" comment="Receive slot  10 Analogue Enables"/>
    <register addr="00002580" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT11_ANA_EN[0]" comment="Receive slot  11 Analogue Enables"/>
    <register addr="00002584" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT11_ANA_EN[1]" comment="Receive slot  11 Analogue Enables"/>
    <register addr="00002588" rw_flags="RW" width="4" name="BT_RX_TIMER_DIG0_EN" comment=""/>
    <register addr="0000258c" rw_flags="RW" width="1" name="BT_RX_TIMER_DIG1_EN" comment=""/>
    <register addr="00002590" rw_flags="RW" width="4" name="BT_RX_TIMER_DELAY0" comment=""/>
    <register addr="00002594" rw_flags="RW" width="4" name="BT_RX_TIMER_DELAY1" comment=""/>
    <register addr="00002598" rw_flags="RW" width="4" name="BT_RX_TIMER_DELAY2" comment=""/>
    <register addr="0000259c" rw_flags="RW" width="4" name="BT_IQ_CAP_CONTROL" comment="General control register (state is persistant)"/>
    <register addr="000025a0" rw_flags="RW" width="4" name="BT_IQ_CAP_TRIGGER_AT_SYSTEM_TIME" comment="When SYSTEM_TIME=TRIGGER_AT_SYSTEM_TIME, and SYSTEM_FINE_TIME=TRIGGER_AT_SYSTEM_FINE_TIME, the timer trigger fires."/>
    <register addr="000025a4" rw_flags="RW" width="1" name="BT_IQ_CAP_TRIGGER_AT_SYSTEM_FINE_TIME" comment="When SYSTEM_TIME=TRIGGER_AT_SYSTEM_TIME, and SYSTEM_FINE_TIME=TRIGGER_AT_SYSTEM_FINE_TIME, the timer trigger fires. Provides 80MHz, 12.5ns resolution."/>
    <register addr="000025a8" rw_flags="R" width="2" name="BT_IQ_CAP_BUFFER_WRITE_POINTER" comment="The index into the sample buffer of the next sample to be written. This will be at bit number WRITE_POINTER x BT_IQ_CAP_SOURCE_SAMPLE_WIDTH in the buffer."/>
    <register addr="000025ac" rw_flags="R" width="2" name="BT_IQ_CAP_BUFFER_START_POINTER" comment="The index into the sample buffer of the earliest valid sample. This will be at bit number START_POINTER x BT_IQ_CAP_SOURCE_SAMPLE_WIDTH in the buffer."/>
    <register addr="000025b0" rw_flags="R" width="2" name="BT_IQ_CAP_NUM_VALID_SAMPLES_IN_BUFFER" comment="How many valid samples are in the buffer"/>
    <register addr="000025b4" rw_flags="R" width="4" name="BT_IQ_CAP_LAST_SAMPLE_SYSTEM_TIME" comment="the value of SYSTEM_TIME at the time the last IQ sample was captured. Resolution 1us."/>
    <register addr="000025b8" rw_flags="R" width="1" name="BT_IQ_CAP_LAST_SAMPLE_SYSTEM_FINE_TIME" comment="the value of SYSTEM_FINE_TIME at the time the last IQ sample was captured. Subdivision of SYSTEM_TIME. Resolution 80MHz / 12.5ns"/>
    <register addr="000025bc" rw_flags="R" width="1" name="BT_IQ_CAP_STATUS" comment="General status register"/>
    <register addr="000025c0" rw_flags="RW" width="2" name="BT_IQ_CAP_STROBE_GENERATOR" comment="Control register for generating a strobe for a data source that isn't running at the expected speed."/>
    <register addr="000025c4" rw_flags="RW" width="2" name="BT_IQ_CAP_PRECAPTURE_SAMPLES" comment="Number of words to store before the starting trigger is fired. This allows samples to be read that were captured before the starting trigger. In addition, this mode can also be used to capture samples without an explicit trigger by setting it to the size of the capture buffer (in samples) so one full buffer's worth of data is captured after BT_IQ_CAP_ON_RFIC_CONTROL[ENABLE] = 1."/>
    <register addr="000025c8" rw_flags="RW" width="1" name="BT_IQ_CAP_DEBUG_SELECT" comment="Debug Select"/>
    <register addr="000025cc" rw_flags="R" width="2" name="BT_IQ_CAP_DEBUG_STATUS" comment="Debug Status"/>
    <register addr="000025d0" rw_flags="RW" width="1" name="BT_IQ_CAP_BUFFER_READ_ADDRESS" comment="The index to read values of the capture memory. Auto increments by 1 when BT_IQ_CAP_BUFFER_READ is read, and wraps at the end of the buffer. But can also be set directly."/>
    <register addr="000025d4" rw_flags="R" width="4" name="BT_IQ_CAP_BUFFER_READ" comment="Read the value of the capture buffer at address BT_IQ_CAP_BUFFER_READ_ADDRESS. Returns 24-bits. BT_IQ_CAP_BUFFER_READ_ADDRESS autoincrements by 1 after the read. Note that samples may need to realigned by bitshifting etc according to their width if NO_PACKING=0."/>
    <register addr="000025d8" rw_flags="R" width="1" name="BT_ANT_ID" comment="Currently selected BT antenna ID, a maximum of 16 antennae are supported in this implementation."/>
    <register addr="000025dc" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[0]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="000025e0" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[1]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="000025e4" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[2]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="000025e8" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[3]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="000025ec" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[4]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="000025f0" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[5]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="000025f4" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[6]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="000025f8" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[7]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="000025fc" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[8]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002600" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[9]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002604" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[10]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002608" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[11]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="0000260c" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[12]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002610" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[13]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002614" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[14]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002618" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[15]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
  </block>
  <block name="btwl_common" comment="Common BT/WLAN registers in RFIC.">
    <register addr="00001000" rw_flags="RW" width="1" name="RFIC_ZIPPY_CFG" comment="BTWL Debug Config register 2"/>
    <register addr="00001004" rw_flags="RW" width="4" name="RFIC_DEBUG_MUX_CFG" comment="BTWL Debug Mux Config"/>
    <register addr="00001008" rw_flags="RW" width="4" name="RFIC_DEBUG_CFG" comment="BTWL Debug Config"/>
    <register addr="0000100c" rw_flags="RW" width="4" name="RFIC_DEBUG_CFG2" comment="BTWL Debug Config register 2"/>
    <register addr="00001010" rw_flags="RW" width="4" name="RFIC_DEBUG_CFG3" comment="BTWL Debug Config register 3"/>
    <register addr="00001014" rw_flags="RW" width="4" name="RFIC_DEBUG_CFG4" comment="BTWL Debug Config register 4"/>
    <register addr="00001018" rw_flags="RW" width="4" name="RFIC_DEBUG_CFG5" comment="BTWL Debug Config register 5"/>
    <register addr="0000101c" rw_flags="RW" width="4" name="RFIC_DEBUG_DDR_MUX" comment="DDR Debug Mux - select what source drives each DDR pin"/>
    <register addr="00001020" rw_flags="RW" width="2" name="RFIC_DEBUG_DDR_INPUT_MUX" comment="DDR Input Mux - select which DDR pin drives which TX IQ input"/>
    <register addr="00001024" rw_flags="RW" width="2" name="RFIC_DEBUG_MUX_PAD_CTRL[0]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001028" rw_flags="RW" width="2" name="RFIC_DEBUG_MUX_PAD_CTRL[1]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="0000102c" rw_flags="RW" width="2" name="RFIC_DEBUG_MUX_PAD_CTRL[2]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001030" rw_flags="RW" width="2" name="RFIC_DEBUG_MUX_PAD_CTRL[3]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001034" rw_flags="RW" width="2" name="RFIC_DEBUG_MUX_PAD_CTRL[4]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001038" rw_flags="RW" width="2" name="RFIC_DEBUG_MUX_PAD_CTRL[5]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="0000103c" rw_flags="RW" width="2" name="RFIC_DEBUG_MUX_PAD_CTRL[6]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001040" rw_flags="RW" width="4" name="RFIC_DEBUG_MUX_SERIAL0" comment="Serialiser 0 control for Debug"/>
    <register addr="00001044" rw_flags="RW" width="4" name="RFIC_DEBUG_MUX_SERIAL1" comment="Serialiser 1 control for Debug"/>
    <register addr="00001048" rw_flags="RW" width="2" name="RFIC_DEBUG_SERIAL_CFG" comment="Serialiser input config"/>
    <register addr="0000104c" rw_flags="RW" width="4" name="RFIC_DEBUG_SERIAL_BIT_WISE0" comment="Serialiser input config"/>
    <register addr="00001050" rw_flags="RW" width="4" name="RFIC_DEBUG_SERIAL_BIT_WISE1" comment="Serialiser input config"/>
    <register addr="00001054" rw_flags="RW" width="4" name="RFIC_DEBUG_SERIAL_BIT_WISE2" comment="Serialiser input config"/>
    <register addr="00001058" rw_flags="RW" width="4" name="RFIC_DEBUG_SERIAL_BIT_WISE3" comment="Serialiser input config"/>
    <register addr="0000105c" rw_flags="RW" width="4" name="RFIC_DEBUG_ZIPPY_CFG" comment="Zippy 18-bit Debug input config"/>
    <register addr="00001060" rw_flags="R" width="1" name="RFIC_DEBUG_PAD_SDR_STATUS" comment="Debug Pad Inputs"/>
    <register addr="00001064" rw_flags="R" width="2" name="RFIC_DEBUG_PAD_DDR_STATUS" comment="Debug Pad DDR Inputs"/>
    <register addr="00001068" rw_flags="R" width="4" name="RFIC_DEBUG_STATUS" comment="Main Debug Status register"/>
    <register addr="0000106c" rw_flags="RW" width="1" name="RFIC_BRACKEN_MEM_ADDR[0]" comment="Bracken Code/Data Mem Address"/>
    <register addr="00001070" rw_flags="RW" width="4" name="RFIC_BRACKEN_MEM_WDATA[0]" comment="Bracken Code/Data Mem Write Data - auto increments address on write"/>
    <register addr="00001074" rw_flags="R" width="4" name="RFIC_BRACKEN_MEM_RDATA[0]" comment="Bracken Code/Data Mem Read Data - auto increments address on read"/>
    <register addr="00001078" rw_flags="RW" width="4" name="RFIC_BRACKEN_CFG[0]" comment="Confg register for RFIC Processor block"/>
    <register addr="0000107c" rw_flags="RW" width="4" name="RFIC_BRACKEN_CFG2[0]" comment="Confg register for RFIC Processor block"/>
    <register addr="00001080" rw_flags="RW" width="1" name="RFIC_BRACKEN_ENABLES[0]" comment="Confg register for RFIC Processor block"/>
    <register addr="00001084" rw_flags="RW" width="4" name="RFIC_BRACKEN_IRQ_SOURCE_SEL_11_8[0]" comment="Confg register for RFIC Processor block"/>
    <register addr="00001088" rw_flags="RW" width="4" name="RFIC_BRACKEN_IRQ_SOURCE_SEL_15_12[0]" comment="Confg register for RFIC Processor block"/>
    <register addr="0000108c" rw_flags="RW" width="1" name="RFIC_BRACKEN_DTCP_MEM_ADDR[0]" comment="Bracken DTCP Mem Address - Data mem is above Instr mem so address is wide enough for both"/>
    <register addr="00001090" rw_flags="RW" width="4" name="RFIC_BRACKEN_DTCP_MEM_WDATA[0]" comment="Bracken DTCP Mem Write Data"/>
    <register addr="00001094" rw_flags="R" width="4" name="RFIC_BRACKEN_DTCP_MEM_RDATA[0]" comment="Bracken DTCP Mem Read Data"/>
    <register addr="00001098" rw_flags="RW" width="1" name="RFIC_BRACKEN_DTCP0_REG_ADDR[0]" comment="Bracken DTCP0 Regs Address"/>
    <register addr="0000109c" rw_flags="RW" width="4" name="RFIC_BRACKEN_DTCP0_REG_WDATA[0]" comment="Bracken DTCP0 Regs Write Data"/>
    <register addr="000010a0" rw_flags="R" width="4" name="RFIC_BRACKEN_DTCP0_REG_RDATA[0]" comment="Bracken DTCP0 Regs Read Data"/>
    <register addr="000010a4" rw_flags="RW" width="1" name="RFIC_BRACKEN_DTCP1_REG_ADDR[0]" comment="Bracken DTCP1 Regs Address"/>
    <register addr="000010a8" rw_flags="RW" width="4" name="RFIC_BRACKEN_DTCP1_REG_WDATA[0]" comment="Bracken DTCP1 Regs Write Data"/>
    <register addr="000010ac" rw_flags="R" width="4" name="RFIC_BRACKEN_DTCP1_REG_RDATA[0]" comment="Bracken DTCP1 Regs Read Data"/>
    <register addr="000010b0" rw_flags="RW" width="2" name="RFIC_SW_ZIPPY_TO_BB_FLAGS[0][0]" comment="Zippy flag data (info and channel) to be sent to BBIC"/>
    <register addr="000010b4" rw_flags="RW" width="2" name="RFIC_SW_ZIPPY_TO_BB_FLAGS[0][1]" comment="Zippy flag data (info and channel) to be sent to BBIC"/>
    <register addr="000010b8" rw_flags="RW" width="1" name="RFIC_SW_ZIPPY_TO_RF_FILTER[0][0]" comment="Filter bitmap for Zippy channels that cause an interrupt to be raised on traffic to the RFIC, set to 1 to get an interrupt for that channel"/>
    <register addr="000010bc" rw_flags="RW" width="1" name="RFIC_SW_ZIPPY_TO_RF_FILTER[0][1]" comment="Filter bitmap for Zippy channels that cause an interrupt to be raised on traffic to the RFIC, set to 1 to get an interrupt for that channel"/>
    <register addr="000010c0" rw_flags="RW" width="2" name="RFIC_SW_ZIPPY_TO_BB_CFG[0][0]" comment="Zippy channel configuration for SW data to the BBIC"/>
    <register addr="000010c4" rw_flags="RW" width="2" name="RFIC_SW_ZIPPY_TO_BB_CFG[0][1]" comment="Zippy channel configuration for SW data to the BBIC"/>
    <register addr="000010c8" rw_flags="R" width="2" name="RFIC_SW_ZIPPY_TO_RF_FLAGS[0][0]" comment="Zippy flag data to the RFIC, plus latched Valid and Ack"/>
    <register addr="000010cc" rw_flags="R" width="2" name="RFIC_SW_ZIPPY_TO_RF_FLAGS[0][1]" comment="Zippy flag data to the RFIC, plus latched Valid and Ack"/>
    <register addr="000010d0" rw_flags="RW" width="2" name="RFIC_ZIPPY_ORIDE_CFG[0][0]" comment="Zippy override config"/>
    <register addr="000010d4" rw_flags="RW" width="2" name="RFIC_ZIPPY_ORIDE_CFG[0][1]" comment="Zippy override config"/>
    <register addr="000010d8" rw_flags="RW" width="4" name="RFIC_ZIPPY_ORIDE_DATA[0][0]" comment="Zippy override data for Zippy-to-BTWL Flags busses"/>
    <register addr="000010dc" rw_flags="RW" width="4" name="RFIC_ZIPPY_ORIDE_DATA[0][1]" comment="Zippy override data for Zippy-to-BTWL Flags busses"/>
    <register addr="000010e0" rw_flags="R" width="2" name="RFIC_ZIPPY_FLAGS_MON[0][0]" comment="Zippy monitor for BTWL-to-Zippy Flags, bus selected from RFIC_ZIPPY_ORIDE_CFG register"/>
    <register addr="000010e4" rw_flags="R" width="2" name="RFIC_ZIPPY_FLAGS_MON[0][1]" comment="Zippy monitor for BTWL-to-Zippy Flags, bus selected from RFIC_ZIPPY_ORIDE_CFG register"/>
    <register addr="000010e8" rw_flags="RW" width="2" name="RFIC_BRACKEN_TIMER[0]" comment="Bracken Timer"/>
    <register addr="000010ec" rw_flags="R" width="4" name="RFIC_PROC_STATUS[0]" comment="Status information for rfic_proc - Bracken Interrupt on Read"/>
    <register addr="000010f0" rw_flags="RW" width="4" name="RFIC_PROC_COMMS[0][0]" comment="Comms register for rfic_proc - Bracken Interrut on Write"/>
    <register addr="000010f4" rw_flags="RW" width="4" name="RFIC_PROC_COMMS[0][1]" comment="Comms register for rfic_proc - Bracken Interrut on Write"/>
    <register addr="000010f8" rw_flags="RW" width="4" name="RFIC_PROC_COMMS[0][2]" comment="Comms register for rfic_proc - Bracken Interrut on Write"/>
    <register addr="000010fc" rw_flags="RW" width="4" name="RFIC_PROC_COMMS[0][3]" comment="Comms register for rfic_proc - Bracken Interrut on Write"/>
    <register addr="00001100" rw_flags="R" width="4" name="RFIC_PROC_PC_HISTORY[0]" comment="History or PC from last 4 clock cycles"/>
    <register addr="00001104" rw_flags="R" width="2" name="RFIC_PROC_TCXO_COUNTER[0]" comment="Value of TCXO Counter"/>
    <register addr="00001108" rw_flags="RW" width="4" name="RFIC_MON_BT_INV[0]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000110c" rw_flags="RW" width="4" name="RFIC_MON_BT_INV[1]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001110" rw_flags="RW" width="4" name="RFIC_MON_BT_INV[2]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001114" rw_flags="RW" width="4" name="RFIC_MON_BT_INV[3]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001118" rw_flags="RW" width="4" name="RFIC_MON_BT_INV[4]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000111c" rw_flags="RW" width="4" name="RFIC_MON_BT_INV[5]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001120" rw_flags="RW" width="4" name="RFIC_MON_BT_INV[6]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001124" rw_flags="RW" width="4" name="RFIC_MON_BT_INV[7]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001128" rw_flags="R" width="4" name="RFIC_MON_BT_AD[0]" comment="Monitor BT AD signals right at the AD interface"/>
    <register addr="0000112c" rw_flags="R" width="4" name="RFIC_MON_BT_AD[1]" comment="Monitor BT AD signals right at the AD interface"/>
    <register addr="00001130" rw_flags="RW" width="4" name="RFIC_MON_BT_CMN_INV[0]" comment="Optional invert for particular BT CMN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001134" rw_flags="RW" width="4" name="RFIC_MON_BT_CMN_INV[1]" comment="Optional invert for particular BT CMN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001138" rw_flags="RW" width="4" name="RFIC_MON_BT_CMN_INV[2]" comment="Optional invert for particular BT CMN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000113c" rw_flags="RW" width="4" name="RFIC_MON_BT_CMN_INV[3]" comment="Optional invert for particular BT CMN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001140" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[0]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001144" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[1]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001148" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[2]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000114c" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[3]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001150" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[4]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001154" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[5]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001158" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[6]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000115c" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[7]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001160" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[8]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001164" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[9]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001168" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[10]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000116c" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[11]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001170" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[12]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001174" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[13]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001178" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[14]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000117c" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[15]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001180" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[16]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001184" rw_flags="RW" width="4" name="RFIC_MON_WL_INV[17]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001188" rw_flags="R" width="4" name="RFIC_MON_WL_AD[0]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="0000118c" rw_flags="R" width="4" name="RFIC_MON_WL_AD[1]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="00001190" rw_flags="R" width="4" name="RFIC_MON_WL_AD[2]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="00001194" rw_flags="R" width="4" name="RFIC_MON_WL_AD[3]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="00001198" rw_flags="R" width="4" name="RFIC_MON_WL_AD[4]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="0000119c" rw_flags="R" width="4" name="RFIC_MON_WL_AD[5]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="000011a0" rw_flags="RW" width="4" name="RFIC_MON_COEX_INV[0]" comment="Optional invert for particular Coex D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="000011a4" rw_flags="RW" width="4" name="RFIC_MON_COEX_INV[1]" comment="Optional invert for particular Coex D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="000011a8" rw_flags="RW" width="4" name="RFIC_MON_COEX_INV[2]" comment="Optional invert for particular Coex D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="000011ac" rw_flags="RW" width="4" name="RFIC_MON_COEX_INV[3]" comment="Optional invert for particular Coex D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="000011b0" rw_flags="RW" width="4" name="RFIC_MON_COEX_INV[4]" comment="Optional invert for particular Coex D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="000011b4" rw_flags="RW" width="4" name="RFIC_MON_COEX_INV[5]" comment="Optional invert for particular Coex D2A/A2D dynamic signals. Check RTL for bit positions."/>
  </block>
  <block name="coex_rf_common" comment="Coexistence RFIC register which are common to all antenna paths.">
    <register addr="00003004" rw_flags="RW" width="1" name="COEX_RF_CMN_FEM_COMBINE_CFG" comment="Coexistence RFIC configuration."/>
  </block>
  <block name="coex_rf_path_0" comment="Coexistence RFIC Registers for an antenna path.">
    <register addr="00004004" rw_flags="RW" width="1" name="COEX_RFP_CFG_I0" comment="Coexistence RFIC configuration."/>
    <register addr="00004008" rw_flags="RW" width="1" name="COEX_RFP_WL_5G_MODE_I0" comment="Set WLAN to 5GHz/6GHz mode"/>
    <register addr="0000400c" rw_flags="RW" width="1" name="COEX_RFP_SW_RESET_I0" comment="Placeholder"/>
    <register addr="00004010" rw_flags="R" width="1" name="COEX_RFP_STATUS_I0" comment="Coex path status"/>
    <register addr="00004014" rw_flags="RW" width="2" name="COEX_RFP_2G_ARB_CFG_I0" comment=""/>
    <register addr="00004018" rw_flags="RW" width="4" name="COEX_RFP_TRAN_CTRL_CFG_I0" comment="Coexistence Transition Control configuration."/>
    <register addr="0000401c" rw_flags="RW" width="1" name="COEX_RFP_SHTX_CFG_I0" comment=""/>
    <register addr="00004020" rw_flags="RW" width="1" name="COEX_RFP_SHRX_CFG_I0" comment=""/>
    <register addr="00004024" rw_flags="RW" width="1" name="COEX_RFP_FEC_FEM_MODE_I0[0]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004028" rw_flags="RW" width="1" name="COEX_RFP_FEC_FEM_MODE_I0[1]" comment="Set the mode for each FEM control pin."/>
    <register addr="0000402c" rw_flags="RW" width="1" name="COEX_RFP_FEC_FEM_MODE_I0[2]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004030" rw_flags="RW" width="1" name="COEX_RFP_FEC_FEM_MODE_I0[3]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004034" rw_flags="RW" width="4" name="COEX_RFP_FEC_IDLE_2G_CFG_I0" comment="Front-end configuration which is applied when this path's 2G activity is idle."/>
    <register addr="00004038" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_2G_TX_CFG_I0[0]" comment="Front-end configuration which is applied when WLAN 2G is transmitting. Index is based on WLAN Tx LUT index (WLRF_ANA_TXRF_2G_FEC_LUT_INDEX)"/>
    <register addr="0000403c" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_2G_TX_CFG_I0[1]" comment="Front-end configuration which is applied when WLAN 2G is transmitting. Index is based on WLAN Tx LUT index (WLRF_ANA_TXRF_2G_FEC_LUT_INDEX)"/>
    <register addr="00004040" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_2G_TX_CFG_I0[2]" comment="Front-end configuration which is applied when WLAN 2G is transmitting. Index is based on WLAN Tx LUT index (WLRF_ANA_TXRF_2G_FEC_LUT_INDEX)"/>
    <register addr="00004044" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_2G_TX_CFG_I0[3]" comment="Front-end configuration which is applied when WLAN 2G is transmitting. Index is based on WLAN Tx LUT index (WLRF_ANA_TXRF_2G_FEC_LUT_INDEX)"/>
    <register addr="00004048" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_2G_TX_CFG_I0[4]" comment="Front-end configuration which is applied when WLAN 2G is transmitting. Index is based on WLAN Tx LUT index (WLRF_ANA_TXRF_2G_FEC_LUT_INDEX)"/>
    <register addr="0000404c" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_2G_RX_CFG_I0" comment="Front-end configuration which is applied when WLAN 2G is receiving, or during simultaneous Rx, when eLNA is disabled"/>
    <register addr="00004050" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_2G_RX_ELNA_CFG_I0" comment="Front-end configuration which is applied when WLAN 2G is receiving, or during simultaneous Rx, when eLNA is enabled"/>
    <register addr="00004054" rw_flags="RW" width="4" name="COEX_RFP_FEC_BT_TX_CFG_I0" comment="Front-end configuration which is applied when Bluetooth is transmitting."/>
    <register addr="00004058" rw_flags="RW" width="4" name="COEX_RFP_FEC_BT_RX_CFG_I0" comment="Front-end configuration which is applied when Bluetooth is receiving when eLNA is disabled."/>
    <register addr="0000405c" rw_flags="RW" width="4" name="COEX_RFP_FEC_BT_RX_ELNA_CFG_I0" comment="Front-end configuration which is applied when Bluetooth is receiving when eLNA is enabled."/>
    <register addr="00004060" rw_flags="RW" width="4" name="COEX_RFP_FEC_IDLE_5G6G_CFG_I0" comment="Front-end configuration which is applied when WLAN 5G6G is idle."/>
    <register addr="00004064" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_5G6G_TX_CFG_I0[0]" comment="Front-end configuration which is applied when WLAN 5G6G is transmitting. Index is based on WLAN Tx LUT index (WLRF_ANA_TXRF_5G6G_FEC_LUT_INDEX)"/>
    <register addr="00004068" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_5G6G_TX_CFG_I0[1]" comment="Front-end configuration which is applied when WLAN 5G6G is transmitting. Index is based on WLAN Tx LUT index (WLRF_ANA_TXRF_5G6G_FEC_LUT_INDEX)"/>
    <register addr="0000406c" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_5G6G_TX_CFG_I0[2]" comment="Front-end configuration which is applied when WLAN 5G6G is transmitting. Index is based on WLAN Tx LUT index (WLRF_ANA_TXRF_5G6G_FEC_LUT_INDEX)"/>
    <register addr="00004070" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_5G6G_TX_CFG_I0[3]" comment="Front-end configuration which is applied when WLAN 5G6G is transmitting. Index is based on WLAN Tx LUT index (WLRF_ANA_TXRF_5G6G_FEC_LUT_INDEX)"/>
    <register addr="00004074" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_5G6G_TX_CFG_I0[4]" comment="Front-end configuration which is applied when WLAN 5G6G is transmitting. Index is based on WLAN Tx LUT index (WLRF_ANA_TXRF_5G6G_FEC_LUT_INDEX)"/>
    <register addr="00004078" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_5G6G_RX_CFG_I0" comment="Front-end configuration which is applied when WLAN 5G6G is receiving when eLNA is disabled."/>
    <register addr="0000407c" rw_flags="RW" width="4" name="COEX_RFP_FEC_WL_5G6G_RX_ELNA_CFG_I0" comment="Front-end configuration which is applied when WLAN 5G6G is receiving when eLNA is enabled."/>
    <register addr="00004080" rw_flags="R" width="4" name="COEX_RFP_FEC_STATUS_I0" comment="WLP Front-end control status."/>
    <register addr="00004084" rw_flags="RW" width="4" name="COEX_RFP_PROT_CHANGE_MODE_I0" comment="Set this to 0xDEADBEEF in order to change the analogue protection. Should clear back to 0 after changing mode."/>
    <register addr="00004088" rw_flags="RW" width="1" name="COEX_RFP_PROT_CFG_I0" comment="Analogue protection configuration register."/>
  </block>
  <block name="rfic_pad_control" comment="RFIC Pad Control Registers">
    <register addr="00005000" rw_flags="RW" width="2" name="PAD_CONTROL_RFIC_CTRL[0]" comment="BTWL control register for RFIC_CTRL pads"/>
    <register addr="00005004" rw_flags="RW" width="2" name="PAD_CONTROL_RFIC_CTRL[1]" comment="BTWL control register for RFIC_CTRL pads"/>
    <register addr="00005008" rw_flags="RW" width="2" name="PAD_CONTROL_RFIC_CTRL[2]" comment="BTWL control register for RFIC_CTRL pads"/>
    <register addr="0000500c" rw_flags="RW" width="2" name="PAD_CONTROL_RFIC_CTRL[3]" comment="BTWL control register for RFIC_CTRL pads"/>
    <register addr="00005010" rw_flags="R" width="1" name="PAD_STATUS_RFIC_CTRL[0]" comment="BTWL status register for RFIC_CTRL pads"/>
    <register addr="00005014" rw_flags="R" width="1" name="PAD_STATUS_RFIC_CTRL[1]" comment="BTWL status register for RFIC_CTRL pads"/>
    <register addr="00005018" rw_flags="R" width="1" name="PAD_STATUS_RFIC_CTRL[2]" comment="BTWL status register for RFIC_CTRL pads"/>
    <register addr="0000501c" rw_flags="R" width="1" name="PAD_STATUS_RFIC_CTRL[3]" comment="BTWL status register for RFIC_CTRL pads"/>
    <register addr="00005020" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[0]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00005024" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[1]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00005028" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[2]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="0000502c" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[3]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00005030" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[0]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00005034" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[1]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00005038" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[2]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="0000503c" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[3]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00005040" rw_flags="RW" width="4" name="RFIC_PAD_MUX_CTRL" comment="Pad muxing control register."/>
    <register addr="00005044" rw_flags="RW" width="4" name="RFIC_PAD_MUX_CTRL2" comment="Pad muxing control register #2."/>
  </block>
  <block name="top_rf" comment="Top level BT/WLAN registers in RFIC.">
    <register addr="00000000" rw_flags="R" width="2" name="CHIP_VERSION" comment="Chip Version and ID (S610 EVT0=0x00B0, S610 EVT1=0x10B0, S610 EVT1.1=0x11B0, S610 EVT2=0x20B0, S612 EVT0=0x00B1, S620 EVT0=0x00B2, S621 EVT0=0x00B3, S621 EVT0.1=0x01B3, S630 EVT0=0x00B4, S615 EVT0=0x00B5, S615 EVT0.1=0x01B5)"/>
    <register addr="00000004" rw_flags="RW" width="2" name="RFIC_CONFIG" comment="Main BT/WL configuration register for RFIC."/>
    <register addr="00000008" rw_flags="RW" width="1" name="RFIC_SLEEP_REQ" comment="BTWL sleep (power domain shutdown) request. Set to 1 to power down the RFIC_CORE power domain. This gets combined with FM's sleep request (in relevant products), so the power domain will only shut down if both active technologies request it, where 'active' means that an external wake-up was previously triggered by that technology. For example, if only BTWL was awake and requested sleep when the power domain will shutdown, however if both BTWL and FM were awake and only BTWL (or FM) requested sleep, then it won't."/>
    <register addr="0000000c" rw_flags="R" width="2" name="RFIC_REGISTER_HASH" comment="Contains a 16-bit hash of all of the BTWL register tree source (generated by drun register build flow). Can be used by CHV etc. to figure out which release of the IP they're running on."/>
    <register addr="00000010" rw_flags="RW" width="1" name="RFIC_LDO_CONFIG" comment="LDO configuration."/>
    <register addr="00000014" rw_flags="RW" width="2" name="RFIC_CLKGEN_CONFIG_BT" comment="Bluetooth firmware clock enables. Relevant bits OR'd with RFIC_CLKGEN_CONFIG_WL bits."/>
    <register addr="00000018" rw_flags="RW" width="1" name="RFIC_CLKGEN_CONFIG_WL[0]" comment="WLAN firmware clock enables. Relevant bits OR'd with RFIC_CLKGEN_CONFIG_BT bits."/>
    <register addr="0000001c" rw_flags="RW" width="1" name="RFIC_CLKGEN_SYSTEM_TIME_DIV_RATIO" comment="Divide ratio-1 for system timer(from TCXO clock). For 52Mz use default value(51) and RFIC_CLKGEN_SYSTEM_TIME_FRAC_INC = 0. N/A for 76.8MHz "/>
    <register addr="00000020" rw_flags="RW" width="1" name="RFIC_CLKGEN_SYSTEM_TIME_EN" comment="Enable the microsecond System Timer."/>
    <register addr="00000024" rw_flags="RW" width="4" name="RFIC_CLKGEN_SYSTEM_TIME_INIT_VAL" comment="Set initial value for the microsecond System Timer."/>
    <register addr="00000028" rw_flags="R" width="4" name="RFIC_CLKGEN_SYSTEM_TIME" comment="Current value of the microsecond System Timer"/>
    <register addr="0000002c" rw_flags="R" width="1" name="RFIC_CLKGEN_SYSTEM_FINE_TIME" comment="Current value of the microsecond System Timer's fine time (TCXO units)."/>
    <register addr="00000030" rw_flags="RW" width="4" name="RFIC_CLKGEN_SYSTEM_TIME_FRAC_INC" comment="Binary fraction to increment the fractional incrementer on every clock cycle. For 76.8MHz use default value. For 52MHz value is 0 "/>
    <register addr="00000034" rw_flags="RW" width="2" name="RFIC_SPARES0" comment="Spare bits."/>
    <register addr="00000038" rw_flags="RW" width="2" name="RFIC_SPARES1" comment="Spare bits."/>
    <register addr="0000003c" rw_flags="R" width="4" name="RFIC_SCSC0" comment="TJ/NC"/>
    <register addr="00000040" rw_flags="R" width="4" name="RFIC_SCSC1" comment="DP/DS"/>
    <register addr="00000044" rw_flags="R" width="4" name="RFIC_SCSC2" comment="FN/CH"/>
    <register addr="00000048" rw_flags="R" width="4" name="RFIC_SCSC3" comment="NZ/CM"/>
    <register addr="0000004c" rw_flags="R" width="4" name="RFIC_SCSC4" comment="BB/MG"/>
    <register addr="00000050" rw_flags="R" width="4" name="RFIC_SCSC5" comment="JB/HK"/>
    <register addr="00000054" rw_flags="R" width="4" name="RFIC_SCSC6" comment="JS/CY"/>
    <register addr="00000058" rw_flags="R" width="4" name="RFIC_SCSC7" comment="MC/ML"/>
    <register addr="0000005c" rw_flags="R" width="4" name="RFIC_SCSC8" comment="DK"/>
    <register addr="00000060" rw_flags="R" width="4" name="RFIC_SCSC9" comment=""/>
    <register addr="00000064" rw_flags="R" width="4" name="RFIC_SCSC10" comment=""/>
    <register addr="00000068" rw_flags="R" width="1" name="AUX_ANA_STATUS0" comment=""/>
    <register addr="0000006c" rw_flags="RW" width="1" name="AUX_ANA_ENABLES" comment=""/>
    <register addr="00000070" rw_flags="RW" width="2" name="AUX_ANA_CFG0" comment=""/>
    <register addr="00000074" rw_flags="RW" width="4" name="BPLL_ENABLES" comment=""/>
    <register addr="00000078" rw_flags="RW" width="4" name="BPLL_CONTROLS_0" comment=""/>
    <register addr="0000007c" rw_flags="RW" width="4" name="BPLL_CONTROLS_1" comment=""/>
    <register addr="00000080" rw_flags="RW" width="4" name="BPLL_CONTROLS_2" comment=""/>
    <register addr="00000084" rw_flags="RW" width="4" name="BPLL_CONTROLS_3" comment=""/>
    <register addr="00000088" rw_flags="RW" width="4" name="BPLL_DSM_F" comment=""/>
    <register addr="0000008c" rw_flags="RW" width="4" name="BPLL_DSM_K" comment=""/>
    <register addr="00000090" rw_flags="RW" width="1" name="BPLL_ABC_START" comment=""/>
    <register addr="00000094" rw_flags="RW" width="1" name="BPLL_SPARE" comment=""/>
    <register addr="00000098" rw_flags="R" width="2" name="BPLL_STATUS" comment=""/>
  </block>
  <block name="wl_rf_common" comment="WLAN RFIC configuration registers which are common between paths.">
    <register addr="00006000" rw_flags="RW" width="4" name="WL_ANA_PERIPH_CMN_CONFIG" comment="This register controls the peripheral block"/>
    <register addr="00006004" rw_flags="RW" width="1" name="WL_ANA_PERIPH_CMN_CONFIG1" comment="This register controls the peripheral block"/>
    <register addr="00006008" rw_flags="RW" width="1" name="WL_ANA_PERIPH_TEST_ONLY" comment=""/>
    <register addr="0000600c" rw_flags="RW" width="1" name="WL_ANA_ABB_RCCAL_CONFIG" comment=""/>
    <register addr="00006010" rw_flags="R" width="4" name="WL_ANA_2G_DGT_LO_PLL_OUT" comment="Read-only register for test"/>
    <register addr="00006014" rw_flags="RW" width="1" name="WL_ANA_LO_VGATEGEN" comment="New in Beta plus model"/>
    <register addr="00006018" rw_flags="RW" width="1" name="WL_ANA_LO2G_PLL_START" comment="This register written to start the PLL running"/>
    <register addr="0000601c" rw_flags="RW" width="1" name="WL_ANA_LO2G_PLL_STOP" comment="This register written to stop the PLL from running"/>
    <register addr="00006020" rw_flags="RW" width="4" name="WL_ANA_LO2G_VCO_CONF" comment=""/>
    <register addr="00006024" rw_flags="RW" width="4" name="WL_ANA_LO2G_DTC_CONF" comment=""/>
    <register addr="00006028" rw_flags="RW" width="4" name="WL_ANA_LO2G_SAPLL_CONF0" comment=""/>
    <register addr="0000602c" rw_flags="RW" width="1" name="WL_ANA_LO2G_SAPLL_CONF1" comment=""/>
    <register addr="00006030" rw_flags="RW" width="4" name="WL_ANA_LO2G_TRPLR_CONF" comment=""/>
    <register addr="00006034" rw_flags="RW" width="4" name="WL_ANA_LO2G_CONF0" comment=""/>
    <register addr="00006038" rw_flags="RW" width="4" name="WL_ANA_LO2G_CONF1" comment=""/>
    <register addr="0000603c" rw_flags="RW" width="4" name="WL_ANA_LO2G_CONF2" comment=""/>
    <register addr="00006040" rw_flags="RW" width="4" name="WL_ANA_LO2G_CONF3" comment=""/>
    <register addr="00006044" rw_flags="RW" width="4" name="WL_ANA_LO2G_CONF4" comment=""/>
    <register addr="00006048" rw_flags="RW" width="4" name="WL_ANA_LO2G_CONF5" comment=""/>
    <register addr="0000604c" rw_flags="RW" width="4" name="WL_ANA_LO2G_CONF6" comment=""/>
    <register addr="00006050" rw_flags="RW" width="4" name="WL_ANA_LO2G_CONF7" comment=""/>
    <register addr="00006054" rw_flags="RW" width="4" name="WL_ANA_LO2G_CONF8" comment=""/>
    <register addr="00006058" rw_flags="RW" width="4" name="WL_ANA_LO2G_CONF9" comment=""/>
    <register addr="0000605c" rw_flags="RW" width="4" name="WL_ANA_LO2G_CONF10" comment=""/>
    <register addr="00006060" rw_flags="RW" width="2" name="WL_ANA_LO2G_CONF11" comment=""/>
    <register addr="00006064" rw_flags="R" width="2" name="WL_ANA_LO2G_CONF12" comment=""/>
    <register addr="00006068" rw_flags="RW" width="4" name="WL_ANA_LO2G_STG0_CONF" comment=""/>
    <register addr="0000606c" rw_flags="RW" width="4" name="WL_ANA_LO2G_STG1_CONF1" comment=""/>
    <register addr="00006070" rw_flags="RW" width="2" name="WL_ANA_LO2G_STG1_CONF2" comment=""/>
    <register addr="00006074" rw_flags="RW" width="4" name="WL_ANA_LO2G_STG2_CONF1" comment=""/>
    <register addr="00006078" rw_flags="RW" width="2" name="WL_ANA_LO2G_STG2_CONF2" comment=""/>
    <register addr="0000607c" rw_flags="RW" width="4" name="WL_ANA_LO2G_DGT_RSVD" comment=""/>
    <register addr="00006080" rw_flags="RW" width="1" name="WLRF_DEBUG0_SEL" comment="WLAN RFIC debug select for output DEBUG1"/>
    <register addr="00006084" rw_flags="RW" width="1" name="WLRF_DEBUG1_SEL" comment="WLAN RFIC debug select for output DEBUG1"/>
    <register addr="00006088" rw_flags="RW" width="1" name="WLRF_AIQ_SWAP_CONFIG" comment="Optional AIQ swap controls"/>
    <register addr="0000608c" rw_flags="RW" width="1" name="WLRF_RADIO_TEMP_SW_RST" comment="Temperature sensor software reset. It is write sensitive. Don't set it back to 0"/>
    <register addr="00006090" rw_flags="RW" width="1" name="WLRF_RADIO_TEMP_CONFIG" comment="Temperature sensor logic configuration."/>
    <register addr="00006094" rw_flags="R" width="1" name="WLRF_RADIO_TEMP_INT_STATUS" comment="Status of generated interrupt events."/>
    <register addr="00006098" rw_flags="W" width="1" name="WLRF_RADIO_TEMP_INT_CLEAR" comment="Clear the status of generated interrupt events."/>
    <register addr="0000609c" rw_flags="RW" width="4" name="WLRF_RADIO_TEMP_CTRL_CONFIG[0]" comment="Mode in which to run the sensor checking."/>
    <register addr="000060a0" rw_flags="R" width="2" name="WLRF_RADIO_TEMP[0]" comment="Status for the sensor."/>
    <register addr="000060a4" rw_flags="RW" width="1" name="WLRF_RADIO_TEMP_CHECK_COUNT[0]" comment="Number of checks to run each time this sensor is selected."/>
    <register addr="000060a8" rw_flags="RW" width="1" name="WL_ANA_2G_LO_PLL_START" comment="This register written to start the PLL running"/>
    <register addr="000060ac" rw_flags="RW" width="1" name="WL_ANA_2G_LO_PLL_STOP" comment="This register written to stop the PLL from running"/>
    <register addr="000060b0" rw_flags="R" width="1" name="WL_ANA_2G_LO_CTRL_STATE" comment="The state of the RFIC_DGT_LO_CTRL block, which controls the PLL start/stop."/>
    <register addr="000060b4" rw_flags="RW" width="1" name="WL_ANA_LO_MISC" comment="General Control signals for 2G LO"/>
    <register addr="000060b8" rw_flags="RW" width="4" name="WLRF_RADIO_RCCAL_CTRL_CFG1" comment=""/>
    <register addr="000060bc" rw_flags="RW" width="4" name="WLRF_RADIO_RCCAL_CTRL_CFG2" comment=""/>
    <register addr="000060c0" rw_flags="R" width="2" name="WLRF_RADIO_RCCAL_CTRL_STATUS" comment=""/>
  </block>
  <block name="wl_rf_path_0" comment="WLAN RFIC configuration registers for a single radio path's digital logic.">
    <register addr="00007000" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[0]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007004" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[1]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007008" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[2]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000700c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[3]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007010" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[4]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007014" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[5]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007018" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[6]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000701c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[7]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007020" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[8]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007024" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[9]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007028" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[10]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000702c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[11]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007030" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[12]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007034" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[13]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007038" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[14]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000703c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_0_I0[15]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007040" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[0]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007044" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[1]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007048" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[2]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000704c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[3]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007050" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[4]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007054" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[5]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007058" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[6]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000705c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[7]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007060" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[8]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007064" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[9]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007068" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[10]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000706c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[11]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007070" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[12]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007074" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[13]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007078" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[14]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000707c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[15]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007080" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[0]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007084" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[1]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007088" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[2]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000708c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[3]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007090" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[4]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007094" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[5]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007098" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[6]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000709c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[7]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070a0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[8]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070a4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[9]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070a8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[10]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070ac" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[11]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070b0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[12]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070b4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[13]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070b8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[14]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070bc" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[15]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070c0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[0]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070c4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[1]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070c8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[2]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070cc" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[3]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070d0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[4]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070d4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[5]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070d8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[6]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070dc" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[7]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070e0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[8]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070e4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[9]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070e8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[10]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070ec" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[11]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070f0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[12]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070f4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[13]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070f8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[14]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000070fc" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_3_I0[15]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00007100" rw_flags="R" width="1" name="WLRF_ANA_STATUS_I0" comment="Returns the value on the ANA_STATUS bus"/>
    <register addr="00007104" rw_flags="RW" width="1" name="WL_ANA_BIAS_EN_I0" comment="Key bias enables."/>
    <register addr="00007108" rw_flags="RW" width="2" name="WL_ANA_RX_2G_BTBUF_I0" comment=""/>
    <register addr="0000710c" rw_flags="RW" width="4" name="WL_ANA_ABB_RX_CONFIG_I0" comment="This register controls Rx baseband"/>
    <register addr="00007110" rw_flags="RW" width="4" name="WL_ANA_ABB_RX_CONFIG2_I0" comment="This register controls Rx baseband"/>
    <register addr="00007114" rw_flags="RW" width="4" name="WL_ANA_ABB_RX_CONFIG3_I0" comment="This register controls Rx baseband"/>
    <register addr="00007118" rw_flags="RW" width="4" name="WL_ANA_ABB_RX_CONFIG4_I0" comment="This register controls Rx baseband"/>
    <register addr="0000711c" rw_flags="RW" width="4" name="WL_ANA_ABB_RX_CONFIG5_I0" comment="This register controls Rx baseband"/>
    <register addr="00007120" rw_flags="RW" width="4" name="WL_ANA_ABB_TX_CONFIG_I0" comment="This register controls Tx baseband"/>
    <register addr="00007124" rw_flags="RW" width="4" name="WL_ANA_ABB_TX_CONFIG1_I0" comment=""/>
    <register addr="00007128" rw_flags="RW" width="1" name="WL_ANA_TX_2G_STATIC_ENABLES_I0" comment="This register contains 2G Tx RF-related static enables."/>
    <register addr="0000712c" rw_flags="RW" width="1" name="WL_ANA_TX_5G_STATIC_ENABLES_I0" comment="This register contains 5G Tx RF-related static enables."/>
    <register addr="00007130" rw_flags="RW" width="1" name="WL_ANA_RX_2G_LNA_CONFIG_I0" comment="This register contains static controls for the Rx 2G LNA."/>
    <register addr="00007134" rw_flags="RW" width="1" name="WL_ANA_RX_5G_LNA_CONFIG_I0" comment="This register contains static controls for the Rx 5G LNA."/>
    <register addr="00007138" rw_flags="RW" width="4" name="WL_ANA_RX_MIX_CONFIG_I0" comment="This registers contains static controls common to all Rx Mixers."/>
    <register addr="0000713c" rw_flags="RW" width="2" name="WL_ANA_RX_PDET_CONFIG_I0" comment="This register contains static controls common to all Rx PDET."/>
    <register addr="00007140" rw_flags="RW" width="2" name="WL_ANA_RX_SPARES_I0" comment="This register contains static controls common to all Rx Drivers."/>
    <register addr="00007144" rw_flags="RW" width="4" name="WL_ANA_DPD_CONFIG_I0" comment="DPD Config"/>
    <register addr="00007148" rw_flags="RW" width="4" name="WL_ANA_TX_DECT_CONFIG_I0" comment="This register contains static controls common to all Tx DECT."/>
    <register addr="0000714c" rw_flags="RW" width="2" name="WL_ANA_MISC_I0" comment="Misc. enables."/>
    <register addr="00007150" rw_flags="RW" width="4" name="WL_ANA_TEST_ONLY0_I0" comment=""/>
    <register addr="00007154" rw_flags="R" width="4" name="WL_ANA_5G_DGT_LO_PLL_OUT_I0" comment="Read-only register for test"/>
    <register addr="00007158" rw_flags="RW" width="1" name="WL_ANA_LO5G_PLL_START_I0" comment="This register written to start the PLL running"/>
    <register addr="0000715c" rw_flags="RW" width="1" name="WL_ANA_LO5G_PLL_STOP_I0" comment="This register written to stop the PLL from running"/>
    <register addr="00007160" rw_flags="RW" width="1" name="WL_ANA_5G6G_LO_CTRL_I0" comment="WLAN 5G6G LO Ctrls"/>
    <register addr="00007164" rw_flags="RW" width="4" name="WL_ANA_LO5G_VCO_CONF_I0" comment=""/>
    <register addr="00007168" rw_flags="RW" width="4" name="WL_ANA_LO5G_DTC_CONF_I0" comment=""/>
    <register addr="0000716c" rw_flags="RW" width="4" name="WL_ANA_LO5G_SAPLL_CONF0_I0" comment=""/>
    <register addr="00007170" rw_flags="RW" width="1" name="WL_ANA_LO5G_SAPLL_CONF1_I0" comment=""/>
    <register addr="00007174" rw_flags="RW" width="4" name="WL_ANA_LO5G_TRPLR_CONF1_I0" comment=""/>
    <register addr="00007178" rw_flags="RW" width="4" name="WL_ANA_LO5G_CONF0_I0" comment=""/>
    <register addr="0000717c" rw_flags="RW" width="4" name="WL_ANA_LO5G_CONF1_I0" comment=""/>
    <register addr="00007180" rw_flags="RW" width="4" name="WL_ANA_LO5G_CONF2_I0" comment=""/>
    <register addr="00007184" rw_flags="RW" width="4" name="WL_ANA_LO5G_CONF3_I0" comment=""/>
    <register addr="00007188" rw_flags="RW" width="4" name="WL_ANA_LO5G_CONF4_I0" comment=""/>
    <register addr="0000718c" rw_flags="RW" width="4" name="WL_ANA_LO5G_CONF5_I0" comment=""/>
    <register addr="00007190" rw_flags="RW" width="4" name="WL_ANA_LO5G_CONF6_I0" comment=""/>
    <register addr="00007194" rw_flags="RW" width="4" name="WL_ANA_LO5G_CONF7_I0" comment=""/>
    <register addr="00007198" rw_flags="RW" width="4" name="WL_ANA_LO5G_CONF8_I0" comment=""/>
    <register addr="0000719c" rw_flags="RW" width="4" name="WL_ANA_LO5G_CONF9_I0" comment=""/>
    <register addr="000071a0" rw_flags="RW" width="4" name="WL_ANA_LO5G_CONF10_I0" comment=""/>
    <register addr="000071a4" rw_flags="RW" width="2" name="WL_ANA_LO5G_CONF11_I0" comment=""/>
    <register addr="000071a8" rw_flags="R" width="2" name="WL_ANA_LO5G_CONF12_I0" comment=""/>
    <register addr="000071ac" rw_flags="RW" width="4" name="WL_ANA_LO5G_STG0_CONF_I0" comment=""/>
    <register addr="000071b0" rw_flags="RW" width="4" name="WL_ANA_LO5G_STG1_CONF1_I0" comment=""/>
    <register addr="000071b4" rw_flags="RW" width="2" name="WL_ANA_LO5G_STG1_CONF2_I0" comment=""/>
    <register addr="000071b8" rw_flags="RW" width="4" name="WL_ANA_LO5G_STG2_CONF1_I0" comment=""/>
    <register addr="000071bc" rw_flags="RW" width="2" name="WL_ANA_LO5G_STG2_CONF2_I0" comment=""/>
    <register addr="000071c0" rw_flags="RW" width="4" name="WL_ANA_LO5G_DGT_RSVD_I0" comment=""/>
    <register addr="000071c4" rw_flags="R" width="1" name="WL_ANA_5G6G_LO_CTRL_STATE_I0" comment="The state of the RFIC_DGT_LO_CTRL block, which controls the SAPLL start/stop."/>
    <register addr="000071c8" rw_flags="RW" width="1" name="WLRF_ANAIF_DEBUG_SEL_I0" comment="WLAN RFIC AnaIf debug select."/>
    <register addr="000071cc" rw_flags="RW" width="1" name="WLRF_ANAIF_RSSI_CTRL_I0[0]" comment="WLAN RFIC register to control how the analogue RSSI blocks (ABB/IB) are enabled and how the clock is requested."/>
    <register addr="000071d0" rw_flags="RW" width="4" name="WLRF_DCOC_CTRL_CONFIG_I0[0]" comment="DCOC controller config"/>
    <register addr="000071d4" rw_flags="RW" width="4" name="WLRF_DCOC_CTRL_CONFIG2_I0[0]" comment="DCOC controller config"/>
    <register addr="000071d8" rw_flags="R" width="2" name="WLRF_DCOC_CTRL_STATUS_I0[0]" comment="DCOC controller status."/>
    <register addr="000071dc" rw_flags="RW" width="1" name="WLRF_DCOC_CTRL_LUT_SELECT_I0[0]" comment="Choose the LUT to access, either read or write"/>
    <register addr="000071e0" rw_flags="RW" width="4" name="WLRF_DCOC_CTRL_LUT_WRITE_I0[0]" comment="Write the specified value to the LUTs. 12 LSBs and 12 MSBs are used for I and Q respectively."/>
    <register addr="000071e4" rw_flags="R" width="4" name="WLRF_DCOC_CTRL_LUT_READ_I0[0]" comment="Read the contents of the LUTs. 12 LSBs and 12 MSBs are used for I and Q respectively."/>
    <register addr="000071e8" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][0]" comment="Rx FE LUT controls."/>
    <register addr="000071ec" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][1]" comment="Rx FE LUT controls."/>
    <register addr="000071f0" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][2]" comment="Rx FE LUT controls."/>
    <register addr="000071f4" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][3]" comment="Rx FE LUT controls."/>
    <register addr="000071f8" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][4]" comment="Rx FE LUT controls."/>
    <register addr="000071fc" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][5]" comment="Rx FE LUT controls."/>
    <register addr="00007200" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][6]" comment="Rx FE LUT controls."/>
    <register addr="00007204" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][7]" comment="Rx FE LUT controls."/>
    <register addr="00007208" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][8]" comment="Rx FE LUT controls."/>
    <register addr="0000720c" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[0][0]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007210" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[0][1]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007214" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[0][2]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007218" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[0][3]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000721c" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[0][4]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007220" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[0][5]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007224" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[0][6]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007228" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[0][7]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000722c" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[0][8]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007230" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][0]" comment="Rx FE LUT controls."/>
    <register addr="00007234" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][1]" comment="Rx FE LUT controls."/>
    <register addr="00007238" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][2]" comment="Rx FE LUT controls."/>
    <register addr="0000723c" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][3]" comment="Rx FE LUT controls."/>
    <register addr="00007240" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][4]" comment="Rx FE LUT controls."/>
    <register addr="00007244" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][5]" comment="Rx FE LUT controls."/>
    <register addr="00007248" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][6]" comment="Rx FE LUT controls."/>
    <register addr="0000724c" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][7]" comment="Rx FE LUT controls."/>
    <register addr="00007250" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][8]" comment="Rx FE LUT controls."/>
    <register addr="00007254" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[1][0]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007258" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[1][1]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000725c" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[1][2]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007260" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[1][3]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007264" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[1][4]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007268" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[1][5]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000726c" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[1][6]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007270" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[1][7]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007274" rw_flags="RW" width="2" name="WL_ANA_FE_LUT2_I0[1][8]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00007278" rw_flags="R" width="4" name="WLRF_ANA_ENABLES_STATUS_I0" comment="This register contains the current values of the Analogue Enables, after all masking and multiplexing."/>
    <register addr="0000727c" rw_flags="R" width="1" name="WLRF_ANA_RAW_WB_RSSI_STATUS_I0[0]" comment="Raw WB RSSI from analogue."/>
    <register addr="00007280" rw_flags="R" width="2" name="WLRF_ANA_RAW_IB_RSSI_STATUS_I0[0]" comment="Raw IB RSSI from analogue."/>
    <register addr="00007284" rw_flags="R" width="2" name="WLRF_ANA_RAW_ABB_RSSI_STATUS_I0[0]" comment="Raw ABB RSSI from analogue."/>
    <register addr="00007288" rw_flags="RW" width="1" name="WLRF_DEBUG_SELECT_I0" comment="Selects which debug appears on the output of the WLAN block"/>
    <register addr="0000728c" rw_flags="R" width="2" name="WLRF_DEBUG_STATUS_I0" comment="Returns the current value on the debug bus"/>
    <register addr="00007290" rw_flags="RW" width="1" name="WLRF_RADIO_CONFIG_I0[0]" comment="Miscellaneous config bits"/>
    <register addr="00007294" rw_flags="R" width="1" name="WLRF_ZIPPY_TX_SPARE_STATUS_I0" comment="Spare Tx RF control bits from ZIPPY."/>
    <register addr="00007298" rw_flags="RW" width="4" name="WLRF_RADIO_AGC_CONFIG1_I0[0]" comment="Miscellaneous config bits for the AGC as follows:"/>
    <register addr="0000729c" rw_flags="RW" width="4" name="WLRF_RADIO_AGC_CONFIG2_I0[0]" comment="Configuration bits for the AGC: gains ranges definition. valid when AGC is active, and gain not forced."/>
    <register addr="000072a0" rw_flags="RW" width="4" name="WLRF_RADIO_AGC_CONFIG3_I0[0]" comment="Miscellaneous config bits for the AGC as follows:"/>
    <register addr="000072a4" rw_flags="RW" width="2" name="WLRF_RADIO_RX_LEVEL_I0[0]" comment="This register contains the value to be sent to the analogue gain stages if the AGC is disabled."/>
    <register addr="000072a8" rw_flags="R" width="2" name="WLRF_RADIO_GAIN_STATUS_I0[0]" comment="This register contains the current gain settings to all blocks in the analogue front end"/>
    <register addr="000072ac" rw_flags="RW" width="1" name="WLRF_RADIO_RX_EXT_LNA_2P0DB_I0[0]" comment="eLNA gain"/>
    <register addr="000072b0" rw_flags="RW" width="1" name="WLRF_RADIO_RX_TOTAL_GAIN_THRESHOLD_I0[0]" comment="Threshold value for the total gain. It is used to reset the timer"/>
    <register addr="000072b4" rw_flags="R" width="1" name="WLRF_RADIO_HIGH_POWER_SIGNAL_FOUND_I0[0]" comment="High Power Signal is begin received"/>
    <register addr="000072b8" rw_flags="RW" width="1" name="WLRF_RSSI_MASK_MSB_I0[0]" comment="Used to mask the MSB of ANA_RX_RSSI"/>
    <register addr="000072bc" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_EXT_LOUD_I0[0]" comment="This register specifies the threshold value for the FE RSSI module, turning off external LNA indication"/>
    <register addr="000072c0" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_WEAK_I0[0]" comment="This register specifies the threshold value for the FE RSSI module, too weak indication   (+ 6dB gain change request)"/>
    <register addr="000072c4" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_LOUD_I0[0]" comment="This register specifies the threshold value for the FE RSSI module, too loud indication   (- 6dB gain change request)"/>
    <register addr="000072c8" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_V_LOUD_I0[0]" comment="This register specifies the threshold value for the FE RSSI module, extra loud indication (-12dB gain change request)"/>
    <register addr="000072cc" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_SIGNAL_FOUND_I0[0]" comment="This register specifies the threshold value for the ABB RSSI module, signal found indication"/>
    <register addr="000072d0" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_WEAK_I0[0]" comment="This register specifies the threshold value for the ABB RSSI module, too weak indication   (+ 2.0dB gain change request)"/>
    <register addr="000072d4" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_LOUD_I0[0]" comment="This register specifies the threshold value for the ABB RSSI module, too loud indication   (- 6dB gain change request)"/>
    <register addr="000072d8" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_V_LOUD_I0[0]" comment="This register specifies the threshold value for the ABB RSSI module, extra loud indication (-12dB gain change request)"/>
    <register addr="000072dc" rw_flags="R" width="2" name="WLRF_RADIO_RX_RSSI_I0[0]" comment="This register contains the RSSI of the receive chain. The lower byte is the 8 bit digital RSSI (fixed to 0 since this is a radio-only chip) and the upper byte is the final analogue gain in 3dB steps."/>
    <register addr="000072e0" rw_flags="R" width="4" name="WLRF_RSSI_FILTERED_STATUS_I0[0]" comment="This register contains the analogue RSSI values for the receive chain, after initial processing in the rssi blocks block."/>
    <register addr="000072e4" rw_flags="RW" width="4" name="WLRF_IB_RSSI_LUT0_I0[0]" comment="First 6 locations of LUT used to generate RSSI values for IB RSSI"/>
    <register addr="000072e8" rw_flags="RW" width="4" name="WLRF_IB_RSSI_LUT1_I0[0]" comment="Locations 5 to 10 of LUT used to generate RSSI values for IB RSSI"/>
    <register addr="000072ec" rw_flags="RW" width="1" name="WLRF_IB_RSSI_LUT2_I0[0]" comment="Last location of LUT used to generate RSSI values for IB RSSI"/>
    <register addr="000072f0" rw_flags="RW" width="4" name="WLRF_ABB_RSSI_LUT0_I0[0]" comment="First 6 locations of LUT used to generate RSSI values for ABB RSSI"/>
    <register addr="000072f4" rw_flags="RW" width="4" name="WLRF_ABB_RSSI_LUT1_I0[0]" comment="Last 6 locations of LUT used to generate RSSI values for ABB RSSI"/>
    <register addr="000072f8" rw_flags="RW" width="1" name="WLRF_FE_LUT_SELECTION_MODE_I0[0]" comment="Switch from one set of LUTs (FeLut[0]) to the other (FeLut[1]) based on AGC state (0 = don't switch;  switch when the AGC state changes from:  1= RF_FREE_RUN to RF_LOCK_REQUESTED; 2=RF_SNR_NUDGE to RF_RECEIVING; 3=RF_SNR_NUDGE to RF_RECEIVING, but after going through RF_NUDGE_AGAIN)"/>
    <register addr="000072fc" rw_flags="RW" width="1" name="WLRF_ELNA_FROM_LUT_I0[0]" comment="Select ELNA Gain from 0: AGC; 1: FeLUT"/>
    <register addr="00007300" rw_flags="R" width="1" name="WLRF_ANA_TIMER_TX_SLOT_I0[0]" comment="This register contains the current slot selected by the Tx timer"/>
    <register addr="00007304" rw_flags="R" width="1" name="WLRF_ANA_TIMER_RX_SLOT_I0[0]" comment="This register contains the current slot selected by the Rx timer"/>
    <register addr="00007308" rw_flags="RW" width="4" name="WLRF_ANA_ENABLES_I0[0]" comment="Default values for analogue enables signals should the mask register select this rather than the timer outputs"/>
    <register addr="0000730c" rw_flags="RW" width="4" name="WLRF_ANA_ENABLES_MASK_I0[0]" comment="Selects use of ANA_ENABLES or timer outputs. A 1 in a given bit selects the timer output."/>
    <register addr="00007310" rw_flags="RW" width="4" name="WLRF_ANA_TRAINING_ENABLES_MASK_I0[0]" comment="This masks the output of the Tx timer when it is not a DPD training frame. The idea is to be able to remove the extra Rx enables that are required for making DPD training work to improve power consumption on frames that don't need them. It should typically have all the Tx bits set and none of the Rx bits."/>
    <register addr="00007314" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[0][0]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007318" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[0][1]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000731c" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[0][2]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007320" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[0][3]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007324" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[0][4]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007328" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[0][5]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000732c" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[0][6]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007330" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[0][7]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007334" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[0][0]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007338" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[0][1]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000733c" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[0][2]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007340" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[0][3]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007344" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[0][4]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007348" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[0][5]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000734c" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[0][6]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007350" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[0][7]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007354" rw_flags="RW" width="2" name="WLRF_ANA_TIMER_TX_SLOT_ON_OFF_LAST_I0[0]" comment="This register sets the start and end of Tx turn on and off ramps, and the slot jumped to in the case of a Tx abort"/>
    <register addr="00007358" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[0][0]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000735c" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[0][1]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007360" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[0][2]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007364" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[0][3]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007368" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[0][4]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000736c" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[0][5]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007370" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[0][6]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007374" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[0][7]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00007378" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[0][0]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000737c" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[0][1]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007380" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[0][2]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007384" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[0][3]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007388" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[0][4]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000738c" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[0][5]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007390" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[0][6]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007394" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[0][7]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00007398" rw_flags="RW" width="2" name="WLRF_ANA_TIMER_RX_SLOT_ON_OFF_LAST_I0[0]" comment="This register sets the start and end of Rx turn on and off ramps, and the slot jumped to in the case of an Rx abort"/>
    <register addr="0000739c" rw_flags="W" width="1" name="WLRF_INT_CLEAR_I0[0]" comment="Writing this register clears any interrupts whose corresponding bits are set in the write data. Bit allocations are as for WL_RF_INT_MASK"/>
    <register addr="000073a0" rw_flags="RW" width="1" name="WLRF_INT_MASK_I0[0]" comment="This register masks events from causing interrupts. Only those interrupts whose mask bit is set will be delivered to the processors"/>
    <register addr="000073a4" rw_flags="R" width="1" name="WLRF_INT_STATUS_I0[0]" comment="This register has bits set in it for any interrupt that is currently active. In addition 'raw' bits are set for any active interrupt, whether it is masked or not"/>
  </block>
  <block name="zippy_rf_0" comment="ZIPPY RF control and status registers">
    <register addr="00008000" rw_flags="RW" width="4" name="ZIPPY_RF_TRANSPORT_I0" comment="ZIPPY transport configuration."/>
    <register addr="00008004" rw_flags="RW" width="1" name="ZIPPY_RF_PRIORITY_INC_RATE_I0" comment="Configure the rate at which priority increases for unserviced channels. "/>
    <register addr="00008008" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS0_CFG_I0" comment="Configure flags0 interface"/>
    <register addr="0000800c" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS1_CFG_I0" comment="Configure flags1 interface"/>
    <register addr="00008010" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS2_CFG_I0" comment="Configure flags2 interface"/>
    <register addr="00008014" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS3_CFG_I0" comment="Configure flags3 interface"/>
    <register addr="00008018" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS4_CFG_I0" comment="Configure flags4 interface"/>
    <register addr="0000801c" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS5_CFG_I0" comment="Configure flags5 interface"/>
    <register addr="00008020" rw_flags="RW" width="4" name="ZIPPY_RF_DATA_CFG_I0" comment="Configure register access options"/>
    <register addr="00008024" rw_flags="RW" width="1" name="ZIPPY_RF_DATA_CFG2_I0" comment=" General Configuration"/>
    <register addr="00008028" rw_flags="RW" width="2" name="ZIPPY_RF_HEARTBEAT_CFG_I0" comment="Heartbeat signal controls"/>
    <register addr="0000802c" rw_flags="RW" width="1" name="ZIPPY_RF_INT_EN_I0" comment="Enable interrupt sources."/>
    <register addr="00008030" rw_flags="R" width="1" name="ZIPPY_RF_INT_STATUS_I0" comment="Status of interrupt sources."/>
    <register addr="00008034" rw_flags="W" width="1" name="ZIPPY_RF_INT_CLEAR_I0" comment="Clear interrupt Sources by writing a 1 to the register bit."/>
    <register addr="00008038" rw_flags="R" width="2" name="ZIPPY_RF_DATA_COUNTS_I0" comment="Local RF counters for data from BB to RF and RF to BB. To be compared with equivalent ones in the BB"/>
    <register addr="0000803c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[0]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008040" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[1]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008044" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[2]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008048" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[3]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000804c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[4]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008050" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[5]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008054" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[6]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008058" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[7]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000805c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[8]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008060" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[9]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008064" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[10]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008068" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[11]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000806c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[12]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008070" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[13]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008074" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[14]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00008078" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I0[15]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000807c" rw_flags="RW" width="2" name="ZIPPY_RF_BACK2BACK_I0" comment="Back to back frame control for sample edge switching."/>
    <register addr="00008080" rw_flags="R" width="1" name="ZIPPY_RF_LRATE_MARGIN_I0" comment="A read of this register in Slow mode will return the uncertainty margin to the rising and falling edge."/>
    <register addr="00008084" rw_flags="RW" width="1" name="ZIPPY_RF_LRATE_CONFIG_I0" comment="Configuration for Line Rate Sampler."/>
  </block>
  <block name="zippy_rf_1" comment="ZIPPY RF control and status registers">
    <register addr="00009000" rw_flags="RW" width="4" name="ZIPPY_RF_TRANSPORT_I1" comment="ZIPPY transport configuration."/>
    <register addr="00009004" rw_flags="RW" width="1" name="ZIPPY_RF_PRIORITY_INC_RATE_I1" comment="Configure the rate at which priority increases for unserviced channels. "/>
    <register addr="00009008" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS0_CFG_I1" comment="Configure flags0 interface"/>
    <register addr="0000900c" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS1_CFG_I1" comment="Configure flags1 interface"/>
    <register addr="00009010" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS2_CFG_I1" comment="Configure flags2 interface"/>
    <register addr="00009014" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS3_CFG_I1" comment="Configure flags3 interface"/>
    <register addr="00009018" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS4_CFG_I1" comment="Configure flags4 interface"/>
    <register addr="0000901c" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS5_CFG_I1" comment="Configure flags5 interface"/>
    <register addr="00009020" rw_flags="RW" width="4" name="ZIPPY_RF_DATA_CFG_I1" comment="Configure register access options"/>
    <register addr="00009024" rw_flags="RW" width="1" name="ZIPPY_RF_DATA_CFG2_I1" comment=" General Configuration"/>
    <register addr="00009028" rw_flags="RW" width="2" name="ZIPPY_RF_HEARTBEAT_CFG_I1" comment="Heartbeat signal controls"/>
    <register addr="0000902c" rw_flags="RW" width="1" name="ZIPPY_RF_INT_EN_I1" comment="Enable interrupt sources."/>
    <register addr="00009030" rw_flags="R" width="1" name="ZIPPY_RF_INT_STATUS_I1" comment="Status of interrupt sources."/>
    <register addr="00009034" rw_flags="W" width="1" name="ZIPPY_RF_INT_CLEAR_I1" comment="Clear interrupt Sources by writing a 1 to the register bit."/>
    <register addr="00009038" rw_flags="R" width="2" name="ZIPPY_RF_DATA_COUNTS_I1" comment="Local RF counters for data from BB to RF and RF to BB. To be compared with equivalent ones in the BB"/>
    <register addr="0000903c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[0]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009040" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[1]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009044" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[2]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009048" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[3]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000904c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[4]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009050" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[5]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009054" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[6]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009058" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[7]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000905c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[8]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009060" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[9]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009064" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[10]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009068" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[11]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000906c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[12]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009070" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[13]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009074" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[14]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="00009078" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER_I1[15]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000907c" rw_flags="RW" width="2" name="ZIPPY_RF_BACK2BACK_I1" comment="Back to back frame control for sample edge switching."/>
    <register addr="00009080" rw_flags="R" width="1" name="ZIPPY_RF_LRATE_MARGIN_I1" comment="A read of this register in Slow mode will return the uncertainty margin to the rising and falling edge."/>
    <register addr="00009084" rw_flags="RW" width="1" name="ZIPPY_RF_LRATE_CONFIG_I1" comment="Configuration for Line Rate Sampler."/>
  </block>
</subsystem>
